{"version":3,"sources":["context/context.tsx","data/Point.ts","data/Rect.ts","components/bullet/bullet.ts","data/Size.ts","data/Circle.ts","components/utils/collision.ts","components/tank/tankBase.ts","components/tank/tankMe.ts","components/tank/tankPlayer.ts","components/tank/tankRobot.ts","components/utils/urls.ts","components/message.ts","components/game/game.ts","components/game/game-container.tsx","components/info/score.tsx","components/bullet/bullet3.ts","components/tank/tankBase3.ts","components/tank/tankMe3.ts","components/game/game3.ts","components/game/game-container3.tsx","components/welcome.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GameDataContext","createContext","gameData","id","engine","setGameData","console","warn","useGameData","useContext","Point","x","y","this","p","angle","Math","cos","sin","floatDigit","toFixed","Rect","position","rotation","size","hw","w","hh","h","rotate","add","vertexes","getVertexes","vertexesY","map","vertexesX","top","min","right","max","bottom","left","Bullet","p5","p0","radius","speed","isHit","offset","circle","Size","Circle","center","getTriangleArea","pa","pb","pc","abs","isCircleHitRect","rect","p1","p2","p3","p4","cp","rectArea","Tank","config","initStatus","halfSize","speedMove","speedRotate","speedBullet","body","battleField","bullets","allowFire","debug","isLive","height","PI","width","color","stroke","textSize","push","fill","translate","text","pop","drawBullets","debugInfo","forEach","toString","b","draw","filter","cb","getBound","rb","isCircleInBound","TankMe","message","keyIsDown","sendRotateLeft","sendRotateRight","sendMoveForward","sendMoveBackword","bullet","sendMessage","keyReleased","keyCode","startFlag","TankBase","TankPlayer","tankCommands","fwd","bwd","rl","rr","blt","TankRobot","lastMoveTime","minMoveTime","move","Date","now","forward","randomMove","curTime","floor","random","rect1","rect2","b1","b2","isRectInBound","getWebSockedDomain","loc","window","location","wsUri","protocol","host","Message","ws","WebSocket","encodeURIComponent","Promise","resolve","addEventListener","callback","evt","data","msg","send","Game","sketch","me","robots","players","canvas","score","Messge","setup","setupGame","runGame","curCanvas","document","querySelector","canvasParentId","remove","createCanvas","parent","getConnection","tankStatus","getRandTankStatus","listenOnMessage","handleMessages","bind","setInterval","syncRate","playerId","background","drawScore","checkIfHit","Object","keys","tankId","idx","typeIdx","indexOf","messageType","substring","messageData","updatePlayersPostion","updatePlayer","updateBullets","updateScore","updateExit","commandData","tanksData","JSON","parse","split","playerStatus","player","updateStatus","commandType","commandValue","playerCommandUpdate","scoreData","r","addBullet","enemyCount","length","allTanks","tank","tb","tbCircle","enemy","log","GameContainer","container","useRef","useEffect","innerWidth","innerHeight","current","style","ref","Score","scores","className","Bullet3","scene","r0","spd","material","geo","mesh","clone","MeshPhongMaterial","SphereGeometry","Mesh","set","z","meshes","originPoint","directionVector","Vector3","collisionResults","Raycaster","intersectObjects","distance","dispose","TankBase3","allowShoot","bodyGeometry","towerGeometry","cannonGeometry","bltColor","transformStatus","boundary","texture","spriteMaterial","textSprite","direction","THREE","BoxGeometry","CylinderGeometry","rotateX","rotateZ","merge","makeTextSprite","meshPos","scale","updateTextSprite","bltsServer","bltServer","bltClient","hit","destory","pos","bulletPos","bulletRot","Euler","rot","bltIdx","backgroundColor","textCanvas","createElement","context","getContext","font","textAlign","fillStyle","lineWidth","fillText","fontsize","Texture","needsUpdate","SpriteMaterial","Sprite","TankMe3","headDirection","Stats","require","Game3","camera","renderer","clock","light","stats","playBoundary","scoreContainer","Scene","PerspectiveCamera","lookAt","envLight","AmbientLight","DirectionalLight","target","WebGLRenderer","antialias","setSize","showPanel","scoreJSX","React","gameContainer","getElementById","statContainer","ReactDOM","render","appendChild","domElement","dom","removeProperty","registerEvents","Clock","getDelta","animate","updatePlayBoundary","initX","MathUtils","randFloat","initY","initR","begin","requestAnimationFrame","playersArr","values","collisionWithMeshes","end","aspect","updateProjectionMatrix","vec","unproject","sub","normalize","copy","multiplyScalar","playerPosition","playerRotation","myScore","playerScores","sort","a","updateCamera","keydownListener","keyupListener","key","moveForward","moveBackward","rotateLeft","rotateRight","shoot","isMovingForward","stopMoving","isMovingBackward","isRotatingLeft","stopRotating","isRotatingRight","updatePlayersAndBulletsPostion","tanksDataIdxArrServer","tanksDataIdxArrLocal","tankData","status","Color","updatePosByServer","updateBulletsByServer","scor","idxLocal","includes","deletedIdx","GameContainer3","game3","addMe","Welcome","inputTankNameE","inputEngineE","checked","onSubmit","e","preventDefault","name","value","placeholder","type","htmlFor","App","useState","Provider","Boolean","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25dc21a8.chunk.js","sourcesContent":["import { GameDataContextType } from '../data/Types';\r\nimport { createContext, useContext } from 'react';\r\n\r\nexport const GameDataContext = createContext<GameDataContextType>({ \r\n  gameData: {id: '', engine: true},\r\n  setGameData: () => console.warn('no data provider')\r\n});\r\n\r\nexport const useGameData = ():GameDataContextType => useContext(GameDataContext);\r\n","class Point {\r\n  x: number;\r\n  y: number;\r\n  constructor(x:number, y:number) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  add(p:Point):Point {\r\n    return new Point(this.x + p.x, this.y + p.y);\r\n  }\r\n\r\n  sub(p:Point):Point {\r\n    return new Point(this.x - p.x, this.y - p.y);\r\n  }\r\n\r\n  rotate(angle: number): Point {\r\n    const x1 = this.x * Math.cos(angle) - this.y * Math.sin(angle);\r\n    const y1 = this.x * Math.sin(angle) + this.y * Math.cos(angle);\r\n    return new Point(x1, y1);\r\n  }\r\n\r\n  toString(floatDigit: number): string {\r\n    return `${this.x.toFixed(floatDigit)},\\n${this.y.toFixed(floatDigit)}`;\r\n  }\r\n}\r\n\r\nexport default Point;","import Point from './Point';\r\nimport Size from './Size';\r\nimport { Bound } from './Types';\r\n\r\nclass Rect {\r\n  position: Point;\r\n  rotation: number;\r\n  size: Size;\r\n\r\n  constructor(position: Point, rotation: number, size: Size) {\r\n    this.position = position;\r\n    this.rotation = rotation;\r\n    this.size = size;\r\n  }\r\n\r\n  getVertexes():Point[] {\r\n    const hw = this.size.w / 2;\r\n    const hh = this.size.h / 2; \r\n  \r\n    return [\r\n      new Point(-hw, -hh).rotate(this.rotation).add(this.position), // top left\r\n      new Point(hw, -hh).rotate(this.rotation).add(this.position), // top right\r\n      new Point(-hw, hh).rotate(this.rotation).add(this.position), // bottom left\r\n      new Point(hw, hh).rotate(this.rotation).add(this.position) // bottom right\r\n    ];\r\n  }\r\n\r\n  getBound(): Bound {\r\n    const vertexes: Point[] = this.getVertexes();\r\n    const vertexesY: number[] = vertexes.map(p => p.y);\r\n    const vertexesX: number[] = vertexes.map(p => p.x);\r\n    return {\r\n      top: Math.min(...vertexesY),\r\n      right: Math.max(...vertexesX),\r\n      bottom: Math.max(...vertexesY),\r\n      left: Math.min(...vertexesX)\r\n    };\r\n  }\r\n}\r\n\r\nexport default Rect;","import p5 from 'p5';\r\nimport Point from '../../data/Point';\r\n\r\nclass Bullet {\r\n  p5: p5;\r\n  id: string;\r\n  radius: number;\r\n  position: Point;\r\n  rotation: number;\r\n  speed: number;\r\n  isHit = false;\r\n\r\n  constructor(p5: p5, id: string, p0: Point, rotation: number) {\r\n    this.p5 = p5;\r\n    this.id = id;\r\n    this.radius = 5;\r\n    this.position = new Point(p0.x, p0.y);\r\n    this.rotation = rotation;\r\n    this.speed = 10;\r\n  }\r\n\r\n  draw(): void {\r\n    const p5 = this.p5;\r\n    const offset = new Point(this.speed * Math.cos(this.rotation), this.speed * Math.sin(this.rotation));\r\n    this.position = this.position.add(offset);\r\n\r\n    p5.circle(this.position.x, this.position.y, this.radius);\r\n  }\r\n}\r\n\r\nexport default Bullet;","class Size {\r\n  // we assume w >= h;\r\n  w: number;\r\n  h: number;\r\n  constructor(w: number, h: number) {\r\n    this.w = w;\r\n    this.h = h;\r\n  }\r\n}\r\n\r\nexport default Size;","import Point from './Point';\r\nimport { Bound } from './Types';\r\n\r\nclass Circle {\r\n  center: Point;\r\n  radius: number;\r\n\r\n  constructor(center: Point, radius: number) {\r\n    this.center = center;\r\n    this.radius = radius;\r\n  }\r\n\r\n  getBound(): Bound {\r\n    return {\r\n      top: this.center.y - this.radius,\r\n      right: this.center.x + this.radius,\r\n      bottom: this.center.y + this.radius,\r\n      left: this.center.x - this.radius\r\n    };\r\n  }\r\n}\r\n\r\nexport default Circle;","import Rect from '../../data/Rect';\r\nimport Circle from '../../data/Circle';\r\nimport Point from '../../data/Point';\r\n\r\nexport const isRectInBound = (rect1: Rect, rect2: Rect): boolean => {\r\n  const b1 = rect1.getBound();\r\n  const b2 = rect2.getBound();\r\n\r\n  return b1.top >= b2.top && b1.right <= b2.right && b1.bottom <= b2.bottom && b1.left >= b2.left;\r\n};\r\n\r\nexport const isCircleInBound = (circle: Circle, rect: Rect): boolean => {\r\n  const cb = circle.getBound();\r\n  const rb = rect.getBound();\r\n  \r\n  return cb.top >= rb.top && cb.right <= rb.right && cb.bottom <= rb.bottom && cb.left >= rb.left;\r\n};\r\n\r\nexport const getTriangleArea = (pa: Point, pb: Point, pc: Point): number => {\r\n  return Math.abs((pb.x*pa.y-pa.x*pb.y)+(pc.x*pb.y-pb.x*pc.y)+(pa.x*pc.y-pc.x*pa.y)) / 2;\r\n};\r\n\r\nexport const isCircleHitRect = (circle: Circle, rect: Rect): boolean => {\r\n  // TODO need to extend the rect because circle has radius\r\n  const [p1, p2, p3, p4] = rect.getVertexes();\r\n  const cp = circle.center;\r\n  const rectArea = rect.size.w * rect.size.h;\r\n  const area = getTriangleArea(p1, p2, cp) + getTriangleArea(p2, p3, cp) + getTriangleArea(p3, p4, cp) + getTriangleArea(p4, p1, cp);\r\n  return area <= rectArea;\r\n};\r\n","import { GameConfig, TankStatus } from '../../data/Types';\r\nimport p5 from 'p5';\r\nimport Point from '../../data/Point';\r\nimport Size from '../../data/Size';\r\nimport Rect from '../../data/Rect';\r\nimport Circle from '../../data/Circle';\r\nimport Bullet from '../bullet/bullet';\r\nimport { isCircleInBound } from '../utils/collision';\r\n\r\nclass Tank {\r\n  p5: p5;\r\n  config: GameConfig;\r\n  size: Size;\r\n  halfSize: Size;\r\n  position: Point;\r\n  rotation: number;\r\n  speedMove: number;\r\n  speedRotate: number;\r\n  speedBullet: number;\r\n  body: Rect;\r\n  battleField: Rect;\r\n  id: string;\r\n  bullets: Bullet[];\r\n  allowFire = true;\r\n  debug: boolean;\r\n  isLive = true;\r\n  constructor(p5: p5, config: GameConfig, id: string, initStatus?: TankStatus) {\r\n    this.p5 = p5;\r\n    this.config = config;\r\n    this.size = {w: 48, h: 32};\r\n    this.halfSize = {w: this.size.w / 2, h: this.size.h / 2};\r\n    if (initStatus) {\r\n      this.position = initStatus.position;\r\n      this.rotation = initStatus.rotation;\r\n    } else {\r\n      this.position = new Point(50, this.config.height-80);\r\n      this.rotation = 0; //0 - 2pi deg\r\n    }\r\n    this.speedMove = 2;\r\n    this.speedRotate = p5.PI/40;\r\n    this.speedBullet = 5;\r\n    this.body = new Rect(this.position, this.rotation, this.size);\r\n    this.battleField = new Rect(new Point(config.width / 2, config.height / 2), 0, new Size(config.width, config.height));\r\n    this.id = id;\r\n    this.bullets = [];\r\n    this.debug = false;\r\n  }\r\n\r\n  draw(color: p5.Color):void {\r\n    const p5 = this.p5;\r\n    p5.stroke(color);\r\n    p5.textSize(12);\r\n\r\n    // plot tank\r\n    p5.push();\r\n    p5.fill(255, 255, 255);\r\n    p5.translate(this.position.x, this.position.y);\r\n    p5.rotate(this.rotation);\r\n    p5.rect(-this.halfSize.w, -this.halfSize.h, this.size.w, this.size.h, 5);\r\n    p5.rect(0 , -this.halfSize.h / 4, this.size.w , this.halfSize.h / 2);\r\n    p5.stroke(255, 255, 255);\r\n    p5.fill(color);\r\n    this.p5.text(this.id, -this.halfSize.w+1, 0);\r\n\r\n    // plot debug info\r\n    p5.pop();\r\n    // plot bullets\r\n    p5.fill(color);\r\n    this.drawBullets();\r\n\r\n    if (this.debug) {\r\n      p5.fill(0, 0, 255);\r\n      this.debugInfo();\r\n    }\r\n  }\r\n\r\n  debugInfo(): void {\r\n    const p5 = this.p5;\r\n    const rect = new Rect(this.position, this.rotation, this.size);\r\n    const boundingP = rect.getVertexes();\r\n    boundingP.forEach(p => {\r\n      p5.text(p.toString(1), p.x, p.y);\r\n    });\r\n  }\r\n\r\n  drawBullets(): void {\r\n    this.bullets.forEach(b => {\r\n      b.draw();\r\n    });\r\n    this.bullets = this.bullets.filter(b => {\r\n      const circle = new Circle(b.position, b.radius);\r\n      return isCircleInBound(circle, this.battleField);\r\n    });\r\n  }\r\n\r\n  nomalizePostion(p: Point): Point {\r\n    return new Point(p.x/this.config.width, p.y/this.config.height);\r\n  }\r\n\r\n  denomalizePosition(p: Point): Point {\r\n    return new Point(p.x*this.config.width, p.y*this.config.height);\r\n  }\r\n}\r\n\r\nexport default Tank;","import { GameConfig, TankStatus } from '../../data/Types';\r\nimport p5 from 'p5';\r\nimport Point from '../../data/Point';\r\nimport Rect from '../../data/Rect';\r\nimport Bullet from '../bullet/bullet';\r\nimport TankBase from './tankBase';\r\nimport Message from '../message';\r\n\r\nclass TankMe extends TankBase {\r\n  message: Message;\r\n  constructor(p5: p5, config: GameConfig, id: string, message: Message, initStatus?: TankStatus) {\r\n    super(p5, config, id, initStatus);\r\n    this.message = message;\r\n  }\r\n  draw(): void {\r\n    const p5 = this.p5;\r\n    let rotation = this.rotation;\r\n    let position = new Point(this.position.x, this.position.y);\r\n    // w: 87, s: 83, a:65, d:68\r\n    if (p5.keyIsDown(65)) {\r\n      rotation -= this.speedRotate;\r\n      this.sendRotateLeft(true);\r\n    }\r\n    if (p5.keyIsDown(68)) {\r\n      rotation += this.speedRotate;\r\n      this.sendRotateRight(true);\r\n    }\r\n    rotation %= 2 * p5.PI;\r\n    let speed = 0;\r\n    if (p5.keyIsDown(87)) {\r\n      speed = this.speedMove;\r\n      this.sendMoveForward(true);\r\n    }\r\n    if (p5.keyIsDown(83)) {\r\n      speed = -this.speedMove;\r\n      this.sendMoveBackword(true);\r\n    }\r\n\r\n    const offset = new Point(speed * Math.cos(rotation), speed * Math.sin(rotation));\r\n    position = position.add(offset);\r\n\r\n    const body = new Rect(position, rotation, this.size);\r\n\r\n    // if (isRectInBound(body, this.battleField)) {\r\n    //   this.position = position;\r\n    //   this.rotation = rotation;\r\n    //   this.body = body;\r\n    // }\r\n\r\n    this.position = position;\r\n    this.rotation = rotation;\r\n    this.body = body;\r\n\r\n    if (p5.keyIsDown(32) && this.allowFire) {\r\n      // fire a bullet\r\n      this.allowFire = false;\r\n      const offset = new Point(this.size.w * Math.cos(this.rotation), this.size.w * Math.sin(this.rotation));\r\n      const bullet = new Bullet(this.p5, this.id, this.position.add(offset), this.rotation);\r\n      this.message.sendMessage(`blt,${bullet.position.x},${bullet.position.y},${bullet.rotation}`);\r\n      this.bullets.push(bullet);\r\n    }\r\n\r\n    p5.keyReleased = () => {\r\n      if (p5.keyCode == 32) {\r\n        this.allowFire = true;\r\n      }\r\n      if (p5.keyCode == 65) {\r\n        this.sendRotateLeft(false);\r\n      }\r\n      if (p5.keyCode == 68) {\r\n        this.sendRotateRight(false);\r\n      }\r\n      if (p5.keyCode == 87) {\r\n        this.sendMoveForward(false);\r\n      }\r\n      if (p5.keyCode == 83) {\r\n        this.sendMoveBackword(false);\r\n      }\r\n    };\r\n    super.draw(p5.color(255, 0, 0));\r\n  }\r\n\r\n  sendMoveForward(startFlag: boolean): void {\r\n    this.message.sendMessage(`fwd,${startFlag ? '1' : '0'}`);\r\n  }\r\n  sendMoveBackword(startFlag: boolean): void {\r\n    this.message.sendMessage(`bwd,${startFlag ? '1' : '0'}`);\r\n  }\r\n  sendRotateLeft(startFlag: boolean): void {\r\n    this.message.sendMessage(`rl,${startFlag ? '1' : '0'}`);\r\n  }\r\n  sendRotateRight(startFlag: boolean): void {\r\n    this.message.sendMessage(`rr,${startFlag ? '1' : '0'}`);\r\n  }\r\n}\r\n\r\nexport default TankMe;","import { GameConfig, TankStatus } from '../../data/Types';\r\nimport p5 from 'p5';\r\nimport Point from '../../data/Point';\r\nimport Rect from '../../data/Rect';\r\nimport { TankCommands } from '../../data/Types';\r\nimport TankBase from './tankBase';\r\nimport Bullet from '../bullet/bullet';\r\n\r\nclass TankPlayer extends TankBase {\r\n  tankCommands: TankCommands\r\n  constructor(p5: p5, config: GameConfig, id: string, initStatus?: TankStatus) {\r\n    super(p5, config, id, initStatus);\r\n    this.tankCommands = {\r\n      fwd: false,\r\n      bwd: false,\r\n      rl: false,\r\n      rr: false,\r\n      blt: false\r\n    };\r\n  }\r\n  updateCommands(tankCommands: TankCommands): void {\r\n    this.tankCommands = {...this.tankCommands, ...tankCommands};\r\n  }\r\n  updateStatus(position: Point, rotation: number): void {\r\n    this.position = position;\r\n    this.rotation = rotation;\r\n    this.body = new Rect(position, rotation, this.size);\r\n  }\r\n\r\n  draw(): void {\r\n    const p5 = this.p5;\r\n    const tankCommands = this.tankCommands;\r\n    let rotation = this.rotation;\r\n    let position = new Point(this.position.x, this.position.y);\r\n    // w: 87, s: 83, a:65, d:68\r\n    if (tankCommands.rl) { \r\n      rotation -= this.speedRotate;\r\n    }\r\n    if (tankCommands.rr) {\r\n      rotation += this.speedRotate;\r\n    }\r\n    rotation %= 2 * p5.PI;\r\n    let speed = 0;\r\n    if (tankCommands.fwd) {\r\n      speed = this.speedMove;\r\n    }\r\n    if (tankCommands.bwd) {\r\n      speed = -this.speedMove;\r\n    }\r\n\r\n    const offset = new Point(speed * Math.cos(rotation), speed * Math.sin(rotation));\r\n    position = position.add(offset);\r\n\r\n    const body = new Rect(position, rotation, this.size);\r\n\r\n    // if (isRectInBound(body, this.battleField)) {\r\n    //   this.position = position;\r\n    //   this.rotation = rotation;\r\n    //   this.body = body;\r\n    // }\r\n\r\n    this.position = position;\r\n    this.rotation = rotation;\r\n    this.body = body;\r\n\r\n    super.draw(p5.color(0, 0, 255));\r\n  }\r\n\r\n  addBullet(x: number, y: number, rotation: number): void {\r\n    const bullet = new Bullet(this.p5, this.id, new Point(x, y), rotation);\r\n    this.bullets.push(bullet);\r\n  }\r\n}\r\n\r\nexport default TankPlayer;","import { GameConfig, TankStatus, Move } from '../../data/Types';\r\nimport p5 from 'p5';\r\nimport Point from '../../data/Point';\r\nimport Rect from '../../data/Rect';\r\nimport TankBase from './tankBase';\r\nimport { isRectInBound } from '../utils/collision';\r\n\r\nclass TankRobot extends TankBase {\r\n  lastMoveTime: number;\r\n  minMoveTime: number;\r\n  move: Move;\r\n  constructor(p5: p5, config: GameConfig, id: string, initStatus?: TankStatus) {\r\n    super(p5, config, id, initStatus);\r\n    this.speedMove = 1;\r\n    this.speedRotate = p5.PI/80;\r\n    this.speedBullet = 2.5;\r\n    this.lastMoveTime = Date.now();\r\n    this.minMoveTime = 3000;\r\n    this.move = {\r\n      forward: 0, \r\n      rotation: 0\r\n    };\r\n  }\r\n  draw(): void {\r\n    const p5 = this.p5;\r\n    this.randomMove();\r\n    super.draw(p5.color(0, 255, 255));\r\n  }\r\n\r\n  randomMove(): void {\r\n    const p5 = this.p5;\r\n\r\n    const curTime = Date.now();\r\n\r\n    if (curTime < this.lastMoveTime + this.minMoveTime) {\r\n      // still less that last move, do nothing\r\n    } else {\r\n      this.lastMoveTime = curTime;\r\n      // get move status\r\n      this.move.forward = Math.floor(Math.random()*10); // 0-9\r\n      this.move.rotation = Math.floor(Math.random()*10);\r\n    }\r\n\r\n    let speed = 0;\r\n    if (this.move.forward <= 1) {\r\n      // don't move\r\n      speed = 0;\r\n    } else if (this.move.forward <= 3){\r\n      // move backword\r\n      speed = -this.speedMove;\r\n    } else {\r\n      // move forward\r\n      speed = this.speedMove;\r\n    }\r\n\r\n    let rotation = this.rotation;\r\n    if (this.move.rotation <= 1) {\r\n      // rotate left\r\n      rotation -= this.speedRotate;\r\n    } else if (this.move.rotation <= 3) {\r\n      rotation += this.speedRotate;\r\n    }\r\n\r\n    rotation %= 2 * p5.PI;\r\n\r\n    const offset = new Point(speed * Math.cos(rotation), speed * Math.sin(rotation));\r\n    let position = new Point(this.position.x, this.position.y);\r\n    position = position.add(offset);\r\n\r\n    const body = new Rect(position, rotation, this.size);\r\n\r\n    if (isRectInBound(body, this.battleField)) {\r\n      this.position = position;\r\n      this.rotation = rotation;\r\n      this.body = body;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TankRobot;","export const getWebSockedDomain = (): string => {\r\n  const loc = window.location;\r\n  let wsUri = 'wss:';\r\n  if (loc.protocol === 'http:') {\r\n    wsUri = 'ws:';\r\n  }\r\n  wsUri += '//' + loc.host;\r\n  return wsUri;\r\n};\r\n\r\nexport const getRandomNumber = (): string => {\r\n  const randomId = Math.random()*10000;\r\n  return randomId.toFixed(0);\r\n};","import { MessageListener } from '../data/Types';\r\nimport { getWebSockedDomain } from './utils/urls';\r\n\r\nclass Message {\r\n  ws: WebSocket;\r\n  id: string;\r\n  constructor(id: string) {\r\n    this.id = id;\r\n  }\r\n\r\n  async getConnection(): Promise<boolean> {\r\n    const wsUri = getWebSockedDomain();\r\n    this.ws = new WebSocket(`${wsUri}/websockets?id=${encodeURIComponent(this.id)}`);\r\n\r\n    return new Promise((resolve) => {\r\n      // Connection opened\r\n      this.ws.addEventListener('open', () => {\r\n        resolve(true);\r\n      });\r\n      this.ws.addEventListener('error', () => {\r\n        resolve(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  listenOnMessage(callback: MessageListener): void {\r\n    this.ws.addEventListener('message', evt => {\r\n      callback(evt.data);\r\n    });\r\n  }\r\n\r\n  sendMessage(msg: string): void {\r\n    this.ws.send(msg);\r\n  }\r\n}\r\n\r\nexport default Message;","import { GameConfig } from '../../data/Types';\r\nimport TankMe from '../tank/tankMe';\r\nimport TankPlayer from '../tank/tankPlayer';\r\nimport TankRobot from '../tank/tankRobot';\r\nimport p5 from 'p5';\r\nimport Point from '../../data/Point';\r\nimport { TankStatus } from '../../data/Types';\r\nimport { isCircleHitRect } from '../utils/collision';\r\nimport Circle from '../../data/Circle';\r\nimport Messge from '../message';\r\nimport Message from '../message';\r\n\r\nclass Game {\r\n  config: GameConfig;\r\n  p5: p5;\r\n  sketch: p5;\r\n  me: TankMe;\r\n  robots: TankRobot[];\r\n  players: {[key: string]: TankPlayer};\r\n  canvas: p5.Renderer;\r\n  score: {[key: string]: number};\r\n  message: Message;\r\n  id: string;\r\n  constructor(config: GameConfig) {\r\n    this.config = config;\r\n    this.robots = [];\r\n    this.players = {};\r\n    this.id = config.id;\r\n    this.score = {};\r\n    this.message = new Messge(this.id);\r\n    this.p5 = new p5((sketch) => {\r\n      sketch.setup = () => {\r\n        this.setupGame(sketch);\r\n      };\r\n      sketch.draw = () => {\r\n        this.runGame();\r\n      };\r\n    });\r\n  }\r\n\r\n  async setupGame(sketch: p5) {\r\n    this.sketch = sketch;\r\n    // remove the previous canvas\r\n    const curCanvas = document.querySelector(`#${this.config.canvasParentId} canvas`);\r\n    if(curCanvas) {\r\n      curCanvas.remove();\r\n    }\r\n    this.canvas = sketch.createCanvas(this.config.width, this.config.height);\r\n    this.canvas.parent(this.config.canvasParentId);\r\n\r\n    const isConnected = await this.message.getConnection();\r\n    if (isConnected) {\r\n      const tankStatus = this.getRandTankStatus();\r\n      this.me = new TankMe(this.p5, this.config, this.id, this.message, tankStatus);\r\n      this.message.listenOnMessage(this.handleMessages.bind(this));\r\n      setInterval(() => {\r\n        this.message.sendMessage(`pos,${this.me.position.x},${this.me.position.y},${this.me.rotation}`);\r\n      }, this.config.syncRate);\r\n    }\r\n  }\r\n\r\n  runGame(): void {\r\n    //clear all canvas\r\n    this.sketch.background('#F3F3F3');\r\n    this.drawScore();\r\n\r\n    if (this.me) {\r\n      this.me.draw();\r\n    }\r\n\r\n    for(const playerId in this.players) {\r\n      const p = this.players[playerId];\r\n      p.draw();\r\n    }\r\n    \r\n    this.checkIfHit();\r\n  }\r\n\r\n  drawScore(): void {\r\n    const p5 = this.p5;\r\n    p5.fill(0, 0, 255);\r\n    p5.stroke(0, 0, 255);\r\n    p5.textSize(32);\r\n    Object.keys(this.score).forEach((tankId, idx) => {\r\n      p5.text(`${tankId}: ${this.score[tankId]}`, 20, 40 + 32 * idx);\r\n    });\r\n  }\r\n\r\n  handleMessages(data: string): void {\r\n    const typeIdx = data.indexOf(',');\r\n    const messageType = data.substring(0, typeIdx);\r\n    const messageData = data.substring(typeIdx + 1);\r\n    switch (messageType) {\r\n      case 'pos':\r\n        this.updatePlayersPostion(messageData);\r\n        break;\r\n      case 'fwd':\r\n      case 'bwd':\r\n      case 'rl':\r\n      case 'rr':\r\n        this.updatePlayer(messageType, messageData);\r\n        break;\r\n      case 'blt':\r\n        this.updateBullets(messageData);\r\n        break;\r\n      case 'hit':\r\n        this.updateScore(messageData);\r\n        break;\r\n      case 'ext':\r\n        this.updateExit(messageData);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  updatePlayersPostion(commandData: string): void {\r\n    const tanksData = JSON.parse(commandData);\r\n    for (const tankId in tanksData) {\r\n      const data = tanksData[tankId].split(',');\r\n      if (tankId === this.id) {\r\n        // no need to create myself\r\n        continue;\r\n      }\r\n      const playerStatus: TankStatus = {\r\n        position: new Point(+data[0], +data[1]),\r\n        rotation: +data[2]\r\n      };\r\n      const player = this.players[tankId];\r\n      if (player) {\r\n        player.updateStatus(playerStatus.position, playerStatus.rotation);\r\n      } else {\r\n        this.players[tankId] = new TankPlayer(this.p5, this.config, tankId, playerStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  updatePlayer(commandType: string, commandData: string): void {\r\n    const data = commandData.split(',');\r\n    const id = data[0];\r\n    const commandValue = +data[1];\r\n    if (id === this.id || !this.players[id]) {\r\n      // no need to update myself or invald player\r\n      return;\r\n    }\r\n    const player = this.players[id];\r\n    const playerCommandUpdate = {[commandType]: !!commandValue};\r\n    player.tankCommands = {...player.tankCommands, ...playerCommandUpdate};\r\n  }\r\n\r\n  updateScore(scoreData: string): void {\r\n    this.score = JSON.parse(scoreData);\r\n  }\r\n\r\n  updateBullets(data: string): void {\r\n    const [id, x, y, r] = data.split(',');\r\n    // skip my own bullet\r\n    if (id === this.id) {\r\n      return;\r\n    }\r\n    // add the bullet to the player\r\n    const player = this.players[id];\r\n    if (player) {\r\n      player.addBullet(+x, +y, +r);\r\n    }\r\n  }\r\n\r\n  updateExit(id: string): void {\r\n    delete this.players[id];\r\n    delete this.score[id];\r\n  }\r\n\r\n  addRobots(): void {\r\n    const enemyCount = this.robots.length;\r\n    this.robots.push(new TankRobot(this.p5, this.config, `robot${enemyCount}`, this.getRandTankStatus()));\r\n  }\r\n\r\n  getRandTankStatus(): TankStatus {\r\n    const randPoint = new Point(Math.random()*this.config.width, Math.random()*this.config.height);\r\n    const randStatus = {\r\n      position: randPoint,\r\n      rotation: Math.random()* 2 * this.p5.PI\r\n    };\r\n    return randStatus;\r\n  }\r\n\r\n  checkIfHit(): void {\r\n    const allTanks = {...this.players, [this.id]: this.me};\r\n\r\n    for (const tankId in allTanks) {\r\n      const tank = allTanks[tankId];\r\n      if (!tank) {\r\n        continue;\r\n      }\r\n      for (const tb of tank.bullets) {\r\n        if (tb.isHit) {\r\n          continue;\r\n        }\r\n        const tbCircle = new Circle(tb.position, tb.radius);\r\n        for (const playerId in allTanks) {\r\n          if (playerId != tankId){\r\n            // never check if hit self\r\n            const enemy = allTanks[playerId];\r\n            if (isCircleHitRect(tbCircle, enemy.body)) {\r\n              console.log(`tank ${tankId} bullet hits tank ${playerId}`);\r\n              if (tankId == this.id) {\r\n                this.message.sendMessage(`hit,${this.id}`);\r\n              }\r\n              tb.isHit = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      tank.bullets = tank.bullets.filter(tb => !tb.isHit);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Game;","import React, {useEffect, useRef} from 'react';\r\nimport { useGameData } from '../../context/context';\r\nimport Game from './game';\r\nimport './game-container.scss';\r\n\r\nconst GameContainer = (): JSX.Element => {\r\n  const container = useRef<HTMLDivElement>(null);\r\n  const { gameData } = useGameData();\r\n  useEffect(() => {\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    const current = container.current;\r\n    if (current) {\r\n      current.style.width = `${width}px`;\r\n      current.style.height = `${height}px`;\r\n    }\r\n    new Game({\r\n      width,\r\n      height,\r\n      canvasParentId: 'game-container',\r\n      syncRate: 100,\r\n      id: gameData.id\r\n    });\r\n  }, []);\r\n  return <div id='game-container' ref={container}></div>;\r\n};\r\n\r\nexport default GameContainer;","import React from 'react';\r\nimport { ScorePros } from '../../data/Types';\r\n\r\nconst Score: React.FunctionComponent<ScorePros> = ({scores, id}: ScorePros): JSX.Element => {\r\n  return (<div id='score-info'>\r\n    {scores.map(score => {\r\n      const className = score.id === id ? 'me' : 'player';\r\n      return <p className={className} key={score.id}>{score.id}: {score.score}</p>;\r\n    })}\r\n  </div>);\r\n};\r\n\r\nexport default Score;","import { Euler, Vector3, MeshBasicMaterial, MeshPhongMaterial, SphereGeometry, Mesh, Scene, Raycaster, Color } from 'three';\r\n\r\nclass Bullet3 {\r\n  id: string;\r\n  radius: number;\r\n  position: Vector3;\r\n  rotation: Euler;\r\n  speed: number;\r\n  isHit = false;\r\n  material: MeshBasicMaterial;\r\n  geo: SphereGeometry;\r\n  mesh: Mesh;\r\n  scene: Scene;\r\n  idx: number;\r\n  constructor(scene: Scene, id: string, p0: Vector3, r0: Euler, spd: number, idx: number, color: Color) {\r\n    this.scene = scene;\r\n    this.radius = 0.5;\r\n    this.speed = spd;\r\n    this.id = id;\r\n    this.position = p0.clone();\r\n    this.rotation = r0.clone();\r\n    this.idx = idx;\r\n    this.material = new MeshPhongMaterial({color});\r\n    this.geo = new SphereGeometry( this.radius, 8, 8 );\r\n    this.mesh = new Mesh(this.geo, this.material);\r\n    this.mesh.position.set(this.position.x, this.position.y, this.position.z);\r\n    this.mesh.rotation.set(this.rotation.x, this.rotation.y, this.rotation.z);\r\n    this.scene.add(this.mesh);\r\n  }\r\n\r\n  collisionWithMeshes(meshes: Mesh[]): boolean {\r\n    const originPoint = this.mesh.position.clone();\r\n    const directionVector = new Vector3(0, 0, -1); // always pointing to the ground\r\n    const ray = new Raycaster(originPoint, directionVector);\r\n    const collisionResults = ray.intersectObjects(meshes);\r\n    if (collisionResults.length > 0 && collisionResults[0].distance < directionVector.length()) {\r\n      console.log('hit the mesh!');\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  destory(): void {\r\n    this.geo.dispose();\r\n    this.material.dispose();\r\n    this.scene.remove(this.mesh);\r\n  }\r\n}\r\n\r\nexport default Bullet3;","import * as THREE from 'three';\r\nimport { TankStatus3, BulletData, TankTransformStatus } from '../../data/Types';\r\nimport Bullet3 from '../bullet/bullet3';\r\nimport { BoxGeometry, Color, CylinderGeometry, Mesh, MeshBasicMaterial, Scene, Vector3, Euler, Texture, SpriteMaterial, Sprite } from 'three';\r\n\r\nclass TankBase3 {\r\n  speedMove: number;\r\n  speedRotate: number;\r\n  speedBullet: number;\r\n  id: string;\r\n  bullets: {[key: string]: Bullet3};\r\n  allowShoot = true;\r\n  debug: boolean;\r\n  isLive = true;\r\n  bodyGeometry: BoxGeometry;\r\n  towerGeometry: CylinderGeometry;\r\n  cannonGeometry: CylinderGeometry;\r\n  material: MeshBasicMaterial;\r\n  mesh: Mesh;\r\n  scene: Scene;\r\n  color: Color;\r\n  bltColor: Color;\r\n  transformStatus: TankTransformStatus;\r\n  boundary: Vector3;\r\n  score: number;\r\n  texture: Texture;\r\n  spriteMaterial: SpriteMaterial;\r\n  textSprite: Sprite;\r\n  constructor(scene: Scene, id: string, initStatus: TankStatus3) {\r\n    this.scene = scene;\r\n    this.id = id;\r\n    this.score = 0;\r\n    this.color = initStatus.color;\r\n    this.bltColor = initStatus.bltColor;\r\n    this.bullets = {};\r\n    this.transformStatus = {\r\n      direction: 0,\r\n      rotation: 0\r\n    };\r\n    this.boundary = new Vector3(0, 0, 0);\r\n    this.material = new THREE.MeshPhongMaterial( {color: this.color} );\r\n\r\n    // const verticesOfCube = [\r\n    //   -4,-3, 2,         4,-3, 2,        4, 3, 2,        -4, 3, 2,\r\n    //   -3.3,-2.5, 0,     3.3,-2.5, 0,    3.3, 2.5, 0,    -3.3, 2.5, 0,\r\n    // ];\r\n  \r\n    // const indicesOfFaces = [\r\n    //   2,1,0,    0,3,2,\r\n    //   0,4,7,    7,3,0,\r\n    //   0,1,5,    5,4,0,\r\n    //   1,2,6,    6,5,1,\r\n    //   2,3,7,    7,6,2,\r\n    //   4,5,6,    6,7,4\r\n    // ];\r\n    //this.bodyGeometry = new THREE.PolyhedronGeometry(verticesOfCube, indicesOfFaces, 6, 2);\r\n    //this.bodyGeometry = new THREE.CylinderGeometry(8, 6, 2, 4, 1);\r\n    this.bodyGeometry = new BoxGeometry(8, 6, 1.2);\r\n    this.towerGeometry = new CylinderGeometry(2, 2, 1, 16);\r\n    this.towerGeometry.rotateX(Math.PI / 2);\r\n    this.towerGeometry.translate(0, 0, 1.1);\r\n    this.cannonGeometry = new CylinderGeometry(0.5, 0.25, 8, 16);\r\n    this.cannonGeometry.rotateZ(Math.PI / 2);\r\n    this.cannonGeometry.translate(5, 0, 1.1);\r\n    this.bodyGeometry.merge(this.towerGeometry);\r\n    this.bodyGeometry.merge(this.cannonGeometry);\r\n\r\n    this.mesh = new Mesh(this.bodyGeometry, this.material);\r\n    this.scene.add(this.mesh);\r\n\r\n    this.makeTextSprite(this.id);\r\n    this.scene.add(this.textSprite);\r\n  }\r\n  \r\n  updateTextSprite(): void {\r\n    if (this.textSprite) {\r\n      const meshPos = this.mesh.position;\r\n      this.textSprite.position.set(meshPos.x, meshPos.y + 10, meshPos.z + 2);\r\n      this.textSprite.scale.set(10,5,1);\r\n    }\r\n  }\r\n  isMovingForward(): boolean {\r\n    return this.transformStatus.direction === 1;\r\n  }\r\n\r\n  moveForward(): void {\r\n    this.transformStatus.direction = 1;\r\n  }\r\n\r\n  isMovingBackward(): boolean {\r\n    return this.transformStatus.direction === -1;\r\n  }\r\n\r\n  moveBackward(): void {\r\n    this.transformStatus.direction = -1;\r\n  }\r\n\r\n  stopMoving(): void {\r\n    this.transformStatus.direction = 0;\r\n  }\r\n\r\n  isMovingStop(): boolean {\r\n    return this.transformStatus.direction === 0;\r\n  }\r\n\r\n  rotateRight(): void {\r\n    this.transformStatus.rotation = -1;\r\n  }\r\n\r\n  isRotatingRight(): boolean {\r\n    return this.transformStatus.rotation === -1;\r\n  }\r\n\r\n  rotateLeft(): void {\r\n    this.transformStatus.rotation = 1;\r\n  }\r\n\r\n  isRotatingLeft(): boolean {\r\n    return this.transformStatus.rotation === 1;\r\n  }\r\n\r\n  stopRotating(): void {\r\n    this.transformStatus.rotation = 0;\r\n  }\r\n\r\n  isRotatingStop(): boolean {\r\n    return this.transformStatus.rotation === 0;\r\n  }\r\n\r\n  updatePosByServer(x: number, y: number, r: number): void {\r\n    this.mesh.rotation.z = r;\r\n    this.mesh.position.x = x;\r\n    this.mesh.position.y = y;\r\n    this.updateTextSprite();\r\n  }\r\n\r\n  updateBulletsByServer(bltsServer: BulletData[], tankId: string): void {\r\n    // update client bullets with the bltsServer array\r\n    bltsServer.forEach(bltServer => {\r\n      const bltClient = this.bullets[bltServer.idx];\r\n      if (bltClient) {\r\n        // there is already this bullet on the client\r\n        if (bltServer.hit) {\r\n          // destory bullet\r\n          bltClient.destory();\r\n          delete this.bullets[bltServer.idx];\r\n          console.log(`Tank ${tankId}'s bullet ${bltServer.idx} destoried`);\r\n        } else {\r\n          // update bullet\r\n          bltClient.mesh.position.set(bltServer.pos.x, bltServer.pos.y, bltServer.pos.z);\r\n        }\r\n      } else {\r\n        // there is no such bullet, need to create one\r\n        const bulletPos = new Vector3(bltServer.pos.x, bltServer.pos.y, bltServer.pos.z);\r\n        const bulletRot = new Euler(0, 0, bltServer.rot);\r\n        const bullet = new Bullet3(this.scene, this.id, bulletPos, bulletRot, this.speedBullet, bltServer.idx, this.bltColor);\r\n        this.bullets[bltServer.idx] = bullet; \r\n      }\r\n    });\r\n  }\r\n\r\n  destory(): void {\r\n    this.bodyGeometry.dispose();\r\n    this.towerGeometry.dispose();\r\n    this.cannonGeometry.dispose();\r\n    this.material.dispose();\r\n    this.scene.remove(this.mesh);\r\n    for(const bltIdx in this.bullets) {\r\n      this.bullets[bltIdx].destory();\r\n    }\r\n    this.texture.dispose();\r\n    this.spriteMaterial.dispose();\r\n    this.scene.remove(this.textSprite);\r\n  }\r\n\r\n  makeTextSprite(message: string): Sprite {\r\n    const fontface = 'Arial';\r\n    const fontsize = 96;\r\n    const backgroundColor = { r:255, g:255, b:255, a: 0};\r\n    const borderThickness = 2;\r\n    \r\n    const textCanvas = document.createElement('canvas');\r\n    const context = textCanvas.getContext('2d')!;\r\n    context.font = `bold ${fontsize}px ${fontface}`;\r\n    context.textAlign = 'center';\r\n  \r\n    // background color\r\n    context.fillStyle   = `rgba(${backgroundColor.r},${backgroundColor.g},${backgroundColor.b},${backgroundColor.a})`;\r\n    \r\n    context.lineWidth = borderThickness;\r\n  \r\n    // text color\r\n    context.fillStyle = 'rgba(25,25,25,1.0)';\r\n    context.fillText( message, borderThickness, fontsize + borderThickness);\r\n  \r\n    // canvas contents will be used for a texture\r\n    this.texture = new Texture(textCanvas);\r\n    this.texture.needsUpdate = true;\r\n\r\n    this.spriteMaterial = new SpriteMaterial({map: this.texture, color: this.color});\r\n    this.textSprite = new Sprite(this.spriteMaterial);\r\n    return this.textSprite;  \r\n  }\r\n}\r\n\r\nexport default TankBase3;","import { TankStatus3 } from '../../data/Types';\r\nimport TankBase3 from './tankBase3';\r\nimport Message from '../message';\r\nimport { Scene, Vector3 } from 'three';\r\n\r\nclass TankMe3 extends TankBase3 {\r\n\r\n  message: Message;\r\n  headDirection: Vector3;\r\n  constructor(scene: Scene, id: string, message: Message, boundary: Vector3, initStatus: TankStatus3) {\r\n    super(scene, id, initStatus);\r\n    this.message = message;\r\n    this.boundary = boundary;\r\n    this.speedMove = 20;\r\n    this.speedRotate = 1;\r\n    this.speedBullet = 80;\r\n    this.debug = false;\r\n    this.headDirection = new Vector3(1, 0, 0);\r\n  }\r\n\r\n  moveForward(): void {\r\n    if (this.transformStatus.direction != 1) {\r\n      // direction changes\r\n      this.message.sendMessage(`dir,1,${Date.now()}`);\r\n    }\r\n    super.moveForward();\r\n  }\r\n\r\n  moveBackward(): void {\r\n    if (this.transformStatus.direction != -1) {\r\n      // direction changes\r\n      this.message.sendMessage(`dir,-1,${Date.now()}`);\r\n    }\r\n    super.moveBackward();\r\n  }\r\n\r\n  stopMoving(): void {\r\n    if (this.transformStatus.direction != 0) {\r\n      // direction changes\r\n      this.message.sendMessage(`dir,0,${Date.now()}`);\r\n    }\r\n    super.stopMoving();\r\n  }\r\n\r\n  rotateRight(): void {\r\n    if (this.transformStatus.rotation != -1) {\r\n      // rotation changes\r\n      this.message.sendMessage(`rot,-1,${Date.now()}`);\r\n    }\r\n    super.rotateRight();\r\n  }\r\n\r\n  rotateLeft(): void {\r\n    if (this.transformStatus.rotation != 1) {\r\n      // rotation changes\r\n      this.message.sendMessage(`rot,1,${Date.now()}`);\r\n    }\r\n    super.rotateLeft();\r\n  }\r\n\r\n  stopRotating(): void {\r\n    if (this.transformStatus.rotation != 0) {\r\n      // rotation changes\r\n      this.message.sendMessage(`rot,0,${Date.now()}`);\r\n    }\r\n    super.stopRotating();\r\n  }\r\n\r\n  shoot(): void {\r\n    this.message.sendMessage(`blt3,${Date.now()}`);\r\n  }\r\n\r\n  isTankInBoundary(): boolean {\r\n    return this.mesh.position.x < this.boundary.x && this.mesh.position.x > -this.boundary.x\r\n      && this.mesh.position.y < this.boundary.y && this.mesh.position.y > -this.boundary.y;\r\n  }\r\n\r\n  updateBoundary(boundary: Vector3): void {\r\n    this.boundary = boundary;\r\n  }\r\n\r\n}\r\n\r\nexport default TankMe3;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as THREE from 'three';\r\n/* eslint-disable @typescript-eslint/no-var-requires */\r\nconst Stats = require('stats-js');\r\n/* eslint-enable @typescript-eslint/no-var-requires */\r\nimport { PerspectiveCamera, Scene, WebGLRenderer, Clock, Vector3, DirectionalLight, AmbientLight, Color, MathUtils } from 'three';\r\nimport { DebugInfo, GameConfig, TankData3, TankStatus3 } from '../../data/Types';\r\n// import Debug from '../info/debug';\r\nimport Score from '../info/score';\r\nimport TankMe3 from '../tank/tankMe3';\r\nimport TankBase3 from '../tank/tankBase3';\r\nimport Message from '../message';\r\n\r\nclass Game3 {\r\n  config: GameConfig;\r\n  message: Message;\r\n  id: string;\r\n  scene: Scene;\r\n  camera: PerspectiveCamera;\r\n  renderer: WebGLRenderer;\r\n  me: TankMe3;\r\n  players: {[key: string]: TankBase3};\r\n  clock: Clock;\r\n  light: DirectionalLight;\r\n  stats: Stats;\r\n  playBoundary: Vector3;\r\n  scoreContainer: HTMLDivElement;\r\n  constructor(config: GameConfig) {\r\n    this.config = config;\r\n    this.id = config.id;\r\n    this.players = {};\r\n    this.message = new Message(this.id);\r\n    this.scene = new Scene();\r\n    this.scene.background = new THREE.Color(0xACDF87);\r\n    this.camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 999);\r\n    \r\n    this.camera.position.set(0, 0, 150);\r\n    this.camera.lookAt(0, 0, -150);\r\n    \r\n    const envLight = new AmbientLight(0xffffff, 0.5);\r\n    this.scene.add(envLight);\r\n    this.light = new DirectionalLight(0xffffff, 1); // soft white light\r\n    this.light.position.set(0, -80, 150);\r\n    this.light.target.position.set(0, 0, 0);\r\n    this.scene.add(this.light);\r\n    this.scene.add(this.light.target);\r\n    \r\n    this.renderer = new WebGLRenderer({antialias: true});\r\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\r\n\r\n    this.stats = new Stats();\r\n    this.stats.showPanel(0);\r\n\r\n    const scoreJSX = React.createElement(Score, {scores: [], id: this.id});\r\n\r\n    const gameContainer = document.getElementById(config.canvasParentId)!;\r\n    const statContainer = document.getElementById('stat-container')!;\r\n    this.scoreContainer = document.createElement('div');\r\n    this.scoreContainer.id = 'score-containter';\r\n    ReactDOM.render(scoreJSX, this.scoreContainer);\r\n    \r\n    gameContainer.appendChild(this.renderer.domElement);\r\n    this.stats.dom.style.removeProperty('position');\r\n    statContainer.appendChild(this.stats.dom);\r\n    gameContainer.appendChild(this.scoreContainer);\r\n\r\n    this.registerEvents();\r\n    this.clock = new Clock();\r\n    this.clock.getDelta();\r\n\r\n    this.animate();\r\n  }\r\n\r\n  async addMe() {\r\n    const isConnected = await this.message.getConnection();\r\n    if (isConnected) {\r\n      this.updatePlayBoundary();\r\n      const initX = MathUtils.randFloat(-this.playBoundary.x, this.playBoundary.x);\r\n      const initY = MathUtils.randFloat(-this.playBoundary.y, this.playBoundary.y);\r\n      const initR = MathUtils.randFloat(0, Math.PI);\r\n      // add a tank\r\n      // this.me = new TankMe3(this.scene, this.config, this.message, this.playBoundary, initStatus);\r\n      this.message.sendMessage(`st3,${initX},${initY},${initR},${Date.now()}`);\r\n      this.message.sendMessage(`bon,${this.playBoundary.x},${this.playBoundary.y}`);\r\n      this.message.listenOnMessage(this.handleMessages.bind(this));\r\n    }\r\n  }\r\n\r\n  animate(): void {\r\n    this.stats.begin();\r\n    requestAnimationFrame(this.animate.bind(this));\r\n    this.renderer.render(this.scene, this.camera);\r\n    if (this.me) {\r\n      // this.updateDebugInfo();\r\n      // check bullet hits\r\n      const playersArr = Object.values(this.players).map(p => p.mesh);\r\n      for (const bltIdx in this.me.bullets) {\r\n        const blt = this.me.bullets[bltIdx];\r\n        if (blt.isHit) {\r\n          continue;\r\n        }\r\n        blt.isHit = blt.collisionWithMeshes(playersArr);\r\n        if (blt.isHit) {\r\n          this.message.sendMessage(`hit3,${bltIdx}`);\r\n        }\r\n      }\r\n      this.updateScore();\r\n    }\r\n    this.stats.end();\r\n  }\r\n\r\n  updateCamera(): void {\r\n    this.camera.aspect = window.innerWidth / window.innerHeight;\r\n    this.camera.updateProjectionMatrix();\r\n  }\r\n\r\n  updatePlayBoundary(): void {\r\n    const vec = new Vector3();\r\n    const pos = new Vector3();\r\n    vec.set(1, 1, 0.5);\r\n    vec.unproject(this.camera);\r\n    vec.sub(this.camera.position).normalize();\r\n    const distance = -this.camera.position.z / vec.z;\r\n    pos.copy(this.camera.position).add(vec.multiplyScalar(distance));\r\n    this.playBoundary = pos;\r\n  }\r\n\r\n  updateDebugInfo(): void {\r\n    const debugInfo: DebugInfo = {\r\n      playerPosition: this.me.mesh.position,\r\n      playerRotation: this.me.mesh.rotation\r\n    };\r\n    console.log(debugInfo);\r\n    // const debugJSX = React.createElement(Debug, debugInfo);\r\n    // ReactDOM.render(debugJSX, this.debugContainer);\r\n  }\r\n\r\n  updateScore(): void {\r\n    const myScore = {id: this.me.id, score: this.me.score};\r\n    const playerScores = Object.values(this.players).map(player => ({id: player.id, score: player.score}));\r\n    playerScores.push(myScore);\r\n    playerScores.sort((a, b) => b.score - a.score);\r\n    const scoreJSX = React.createElement(Score, {scores: playerScores, id: myScore.id});\r\n    ReactDOM.render(scoreJSX, this.scoreContainer);\r\n  }\r\n\r\n  registerEvents(): void {\r\n    window.addEventListener('resize', () => {\r\n      this.updateCamera();\r\n      if (this.me) {\r\n        this.updatePlayBoundary();\r\n        this.message.sendMessage(`bon,${this.playBoundary.x},${this.playBoundary.y}`);\r\n      }\r\n      this.renderer.setSize( window.innerWidth, window.innerHeight );\r\n    });\r\n    window.addEventListener('keydown', this.keydownListener.bind(this));\r\n    window.addEventListener('keyup', this.keyupListener.bind(this));\r\n  }\r\n\r\n  keydownListener(evt: KeyboardEvent): void {\r\n    if (!this.me) {\r\n      return;\r\n    }\r\n    if (evt.key === 'w') {\r\n      this.me.moveForward();\r\n    }\r\n    if (evt.key === 's') {\r\n      this.me.moveBackward();\r\n    }\r\n    if (evt.key === 'a') {\r\n      this.me.rotateLeft();\r\n    }\r\n    if (evt.key === 'd') {\r\n      this.me.rotateRight();\r\n    }\r\n    if (evt.key === ' ' && this.me.allowShoot) {\r\n      this.me.allowShoot = false;\r\n      this.me.shoot();\r\n    }\r\n  }\r\n\r\n  keyupListener(evt: KeyboardEvent): void {\r\n    if (!this.me) {\r\n      return;\r\n    }\r\n    if (evt.key === 'w' && this.me.isMovingForward()) {\r\n      this.me.stopMoving();\r\n    }\r\n    if (evt.key === 's' && this.me.isMovingBackward()) {\r\n      this.me.stopMoving();\r\n    }\r\n    if (evt.key === 'a' && this.me.isRotatingLeft()) {\r\n      this.me.stopRotating();\r\n    }\r\n    if (evt.key === 'd' && this.me.isRotatingRight()) {\r\n      this.me.stopRotating();\r\n    }\r\n    if (evt.key === ' ') {\r\n      this.me.allowShoot = true;\r\n    }\r\n  }\r\n\r\n  handleMessages(data: string): void {\r\n    const typeIdx = data.indexOf(',');\r\n    const messageType = data.substring(0, typeIdx);\r\n    const messageData = data.substring(typeIdx + 1);\r\n    switch (messageType) {\r\n      case 'pos3':\r\n        this.updatePlayersAndBulletsPostion(messageData);\r\n        break;\r\n      case 'blt':\r\n        this.updateBullets(messageData);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  updatePlayersAndBulletsPostion(commandData: string): void {\r\n    const tanksData = JSON.parse(commandData);\r\n    const tanksDataIdxArrServer = Object.keys(tanksData);\r\n    const tanksDataIdxArrLocal = Object.keys(this.players);\r\n    tanksDataIdxArrServer.forEach(tankId => {\r\n      const tankData: TankData3 = tanksData[tankId];\r\n      if (tankId === this.id) {\r\n        if (!this.me) {\r\n          const status: TankStatus3 = {\r\n            color: new Color(0xffff00),\r\n            bltColor: new Color(0xff0000)\r\n          };\r\n          this.me = new TankMe3(this.scene, this.id, this.message, this.playBoundary, status);\r\n          this.message.sendMessage(`stup,${this.me.speedMove},${this.me.speedRotate},${this.me.speedBullet}`);\r\n        }\r\n        this.me.updatePosByServer(tankData.pos.x, tankData.pos.y, tankData.pos.r);\r\n        this.me.updateBulletsByServer(tankData.blt, tankId);\r\n        this.me.score = tankData.scor;\r\n      } else {\r\n        if (!this.players[tankId]) {\r\n          const status: TankStatus3 = {\r\n            color: new Color(0x00ffff),\r\n            bltColor: new Color(0xff0000)\r\n          };\r\n          const player = new TankBase3(this.scene, tankId, status);\r\n          this.players[tankId] = player;\r\n        }\r\n        const player = this.players[tankId];\r\n        player.updatePosByServer(tankData.pos.x, tankData.pos.y, tankData.pos.r);\r\n        player.updateBulletsByServer(tankData.blt, tankId);\r\n        player.score = tankData.scor;\r\n      }\r\n    });\r\n\r\n    // find which tank has left the game\r\n    const deletedTanks = tanksDataIdxArrLocal.filter(idxLocal => !tanksDataIdxArrServer.includes(idxLocal));\r\n    deletedTanks.forEach(deletedIdx => {\r\n      this.players[deletedIdx].destory();\r\n      delete this.players[deletedIdx];\r\n      console.log(`player ${deletedIdx} exits`);\r\n    });\r\n  }\r\n\r\n  updateBullets(data: string): void {\r\n    const [id] = data.split(',');\r\n    // skip my own bullet\r\n    if (id === this.id) {\r\n      return;\r\n    }\r\n    // add the bullet to the player\r\n  }\r\n}\r\n\r\nexport default Game3;","import React, {useEffect} from 'react';\r\nimport { useGameData } from '../../context/context';\r\nimport './game-container3.scss';\r\nimport Game3 from './game3';\r\n\r\nconst GameContainer3 = (): JSX.Element => {\r\n  const { gameData } = useGameData();\r\n  let game3: Game3 | undefined;\r\n  useEffect(() => {\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    if (!game3) {\r\n      game3 = new Game3({\r\n        width,\r\n        height,\r\n        canvasParentId: 'game-container',\r\n        syncRate: 100,\r\n        id: gameData.id\r\n      });\r\n      game3.addMe();\r\n    }\r\n  }, []);\r\n  return (<div id='overall-container'>\r\n    <div id='game-container'></div>\r\n    <div id='stat-container'></div>\r\n  </div>);\r\n};\r\n\r\nexport default GameContainer3;","import React, { FormEvent, useRef, useEffect } from 'react';\r\nimport { useGameData } from '../context/context';\r\n\r\nimport './welcome.scss';\r\n\r\nconst Welcome = (): JSX.Element => {\r\n  const inputTankNameE = useRef<HTMLInputElement>(null);\r\n  const inputEngineE = useRef<HTMLInputElement>(null);\r\n  const { setGameData, gameData } = useGameData();\r\n  useEffect(() => {\r\n    if (inputEngineE.current) {\r\n      inputEngineE.current.checked = gameData.engine;\r\n    }\r\n  }, []);\r\n  const formPreventDefault = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    let name = '', engine = true;\r\n    if (inputTankNameE.current && inputTankNameE.current.value) {\r\n      name = inputTankNameE.current.value;\r\n    }\r\n    if (inputEngineE.current) {\r\n      engine = inputEngineE.current.checked;\r\n    }\r\n    setGameData({\r\n      id: name,\r\n      engine\r\n    });\r\n  };\r\n  return <div id='tank-name-form'>\r\n    <form onSubmit={formPreventDefault}>\r\n      <div className='form-div'>\r\n        <input id='tank-name' size={50} placeholder='please name your tank' ref={inputTankNameE}></input>\r\n      </div>\r\n      <div className='form-div'>\r\n        <input id='threejs-engine' type='checkbox' ref={inputEngineE}></input><label htmlFor='threejs-engine'>Engine Mode</label>\r\n      </div>\r\n      <button>Start</button>\r\n    </form>\r\n  </div>;\r\n};\r\n\r\nexport default Welcome;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { GameDataContext } from './context/context';\r\nimport GameContainer from './components/game/game-container';\r\nimport GameContainer3 from './components/game/game-container3';\r\nimport Welcome from './components/welcome';\r\n\r\nfunction App():JSX.Element {\r\n  const [gameData, setGameData] = useState({id: '', engine: true});\r\n  console.log(gameData);\r\n  const getView = () => {\r\n    if (!gameData.id) {\r\n      return <Welcome />;\r\n    } else if (gameData.engine) {\r\n      return <GameContainer3 />;\r\n    } else {\r\n      return <GameContainer />;\r\n    }\r\n  };\r\n  return <GameDataContext.Provider value={{ gameData, setGameData }}>\r\n    <div className=\"App\">\r\n      {getView()}\r\n    </div>\r\n  </GameDataContext.Provider>;\r\n}\r\n\r\nexport default App;\r\n","/* eslint-disable @typescript-eslint/no-explicit-any*/\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport const register = (config: any): void => {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n  // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nfunction registerValidSW(swUrl: string, config: any) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config: any) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n    (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport const unregister = (): void => {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}