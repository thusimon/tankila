{"version":3,"sources":["context/context.tsx","data/Point.ts","data/Rect.ts","components/bullet.ts","data/Size.ts","data/Circle.ts","components/utils/collision.ts","components/tank/tankBase.ts","components/tank/tankMe.ts","components/tank/tankPlayer.ts","components/tank/tankRobot.ts","components/utils/urls.ts","components/message.ts","components/game/game.ts","components/game/game-container.tsx","components/tank/tankMe3.ts","components/tank/tankBase3.ts","components/game/game3.ts","components/game/game-container3.tsx","components/welcome.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GameDataContext","createContext","gameData","id","engine","setGameData","console","warn","useGameData","useContext","Point","x","y","this","p","angle","Math","cos","sin","floatDigit","toFixed","Rect","position","rotation","size","hw","w","hh","h","rotate","add","vertexes","getVertexes","vertexesY","map","vertexesX","top","min","right","max","bottom","left","Bullet","p5","p0","radius","speed","isHit","offset","circle","Size","Circle","center","isCircleInBound","rect","cb","getBound","rb","getTriangleArea","pa","pb","pc","abs","isCircleHitRect","p1","p2","p3","p4","cp","rectArea","Tank","config","initStatus","halfSize","speedMove","speedRotate","speedBullet","body","battleField","bullets","allowFire","debug","isLive","height","PI","width","color","stroke","textSize","push","fill","translate","text","pop","drawBullets","debugInfo","forEach","toString","b","draw","filter","TankMe","message","keyIsDown","sendRotateLeft","sendRotateRight","sendMoveForward","sendMoveBackword","bullet","sendMessage","keyReleased","keyCode","startFlag","TankBase","TankPlayer","tankCommands","fwd","bwd","rl","rr","blt","TankRobot","lastMoveTime","minMoveTime","move","Date","now","forward","randomMove","curTime","floor","random","rect1","rect2","b1","b2","isRectInBound","getWebSockedDomain","loc","window","location","wsUri","protocol","host","Message","ws","WebSocket","encodeURIComponent","Promise","resolve","addEventListener","callback","evt","data","msg","send","Game","sketch","me","robots","players","canvas","score","Messge","setup","setupGame","runGame","curCanvas","document","querySelector","canvasParentId","remove","createCanvas","parent","getConnection","tankStatus","getRandTankStatus","listenOnMessage","handleMessages","bind","setInterval","syncRate","playerId","background","drawScore","checkIfHit","Object","keys","tankId","idx","typeIdx","indexOf","messageType","substring","messageData","updatePlayersPostion","updatePlayer","updateBullets","updateScore","updateExit","commandData","tanksData","JSON","parse","split","playerStatus","player","updateStatus","commandType","commandValue","playerCommandUpdate","scoreData","r","addBullet","enemyCount","length","allTanks","tank","tb","tbCircle","enemy","log","GameContainer","container","useRef","useEffect","innerWidth","innerHeight","current","style","ref","TankMe3","scene","clock","transformStatus","headDirection","direction","Vector3","deltaTime","getDelta","rotationDelta","rotateZ","axis","THREE","translateOnAxis","bodyGeometry","bodyMaterial","camera","renderer","z","antialias","setSize","getElementById","appendChild","domElement","registerEvents","animate","requestAnimationFrame","render","update","aspect","updateProjectionMatrix","keydownListener","keyupListener","key","moveForward","moveBackward","rotateLeft","rotateRight","isMovingForward","stopMoving","isMovingBackward","isRotatingLeft","stopRotating","isRotatingRight","GameContainer3","game3","Game3","Welcome","inputTankNameE","inputEngineE","checked","onSubmit","e","preventDefault","name","value","className","placeholder","type","htmlFor","App","useState","Provider","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd8004e5.chunk.js","sourcesContent":["import { GameDataContextType } from '../data/Types';\r\nimport { createContext, useContext } from 'react';\r\n\r\nexport const GameDataContext = createContext<GameDataContextType>({ \r\n  gameData: {id: '', engine: true},\r\n  setGameData: () => console.warn('no data provider')\r\n});\r\n\r\nexport const useGameData = ():GameDataContextType => useContext(GameDataContext);\r\n","class Point {\r\n  x: number;\r\n  y: number;\r\n  constructor(x:number, y:number) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  add(p:Point):Point {\r\n    return new Point(this.x + p.x, this.y + p.y);\r\n  }\r\n\r\n  sub(p:Point):Point {\r\n    return new Point(this.x - p.x, this.y - p.y);\r\n  }\r\n\r\n  rotate(angle: number): Point {\r\n    const x1 = this.x * Math.cos(angle) - this.y * Math.sin(angle);\r\n    const y1 = this.x * Math.sin(angle) + this.y * Math.cos(angle);\r\n    return new Point(x1, y1);\r\n  }\r\n\r\n  toString(floatDigit: number): string {\r\n    return `${this.x.toFixed(floatDigit)},\\n${this.y.toFixed(floatDigit)}`;\r\n  }\r\n}\r\n\r\nexport default Point;","import Point from './Point';\r\nimport Size from './Size';\r\nimport { Bound } from './Types';\r\n\r\nclass Rect {\r\n  position: Point;\r\n  rotation: number;\r\n  size: Size;\r\n\r\n  constructor(position: Point, rotation: number, size: Size) {\r\n    this.position = position;\r\n    this.rotation = rotation;\r\n    this.size = size;\r\n  }\r\n\r\n  getVertexes():Point[] {\r\n    const hw = this.size.w / 2;\r\n    const hh = this.size.h / 2; \r\n  \r\n    return [\r\n      new Point(-hw, -hh).rotate(this.rotation).add(this.position), // top left\r\n      new Point(hw, -hh).rotate(this.rotation).add(this.position), // top right\r\n      new Point(-hw, hh).rotate(this.rotation).add(this.position), // bottom left\r\n      new Point(hw, hh).rotate(this.rotation).add(this.position) // bottom right\r\n    ];\r\n  }\r\n\r\n  getBound(): Bound {\r\n    const vertexes: Point[] = this.getVertexes();\r\n    const vertexesY: number[] = vertexes.map(p => p.y);\r\n    const vertexesX: number[] = vertexes.map(p => p.x);\r\n    return {\r\n      top: Math.min(...vertexesY),\r\n      right: Math.max(...vertexesX),\r\n      bottom: Math.max(...vertexesY),\r\n      left: Math.min(...vertexesX)\r\n    };\r\n  }\r\n}\r\n\r\nexport default Rect;","import p5 from 'p5';\r\nimport Point from '../data/Point';\r\n\r\nclass Bullet {\r\n  p5: p5;\r\n  id: string;\r\n  radius: number;\r\n  position: Point;\r\n  rotation: number;\r\n  speed: number;\r\n  isHit = false;\r\n\r\n  constructor(p5: p5, id: string, p0: Point, rotation: number) {\r\n    this.p5 = p5;\r\n    this.id = id;\r\n    this.radius = 5;\r\n    this.position = new Point(p0.x, p0.y);\r\n    this.rotation = rotation;\r\n    this.speed = 10;\r\n  }\r\n\r\n  draw(): void {\r\n    const p5 = this.p5;\r\n    const offset = new Point(this.speed * Math.cos(this.rotation), this.speed * Math.sin(this.rotation));\r\n    this.position = this.position.add(offset);\r\n\r\n    p5.circle(this.position.x, this.position.y, this.radius);\r\n  }\r\n}\r\n\r\nexport default Bullet;","class Size {\r\n  // we assume w >= h;\r\n  w: number;\r\n  h: number;\r\n  constructor(w: number, h: number) {\r\n    this.w = w;\r\n    this.h = h;\r\n  }\r\n}\r\n\r\nexport default Size;","import Point from './Point';\r\nimport { Bound } from './Types';\r\n\r\nclass Circle {\r\n  center: Point;\r\n  radius: number;\r\n\r\n  constructor(center: Point, radius: number) {\r\n    this.center = center;\r\n    this.radius = radius;\r\n  }\r\n\r\n  getBound(): Bound {\r\n    return {\r\n      top: this.center.y - this.radius,\r\n      right: this.center.x + this.radius,\r\n      bottom: this.center.y + this.radius,\r\n      left: this.center.x - this.radius\r\n    };\r\n  }\r\n}\r\n\r\nexport default Circle;","import Rect from '../../data/Rect';\r\nimport Circle from '../../data/Circle';\r\nimport Point from '../../data/Point';\r\n\r\nexport const isRectInBound = (rect1: Rect, rect2: Rect): boolean => {\r\n  const b1 = rect1.getBound();\r\n  const b2 = rect2.getBound();\r\n\r\n  return b1.top >= b2.top && b1.right <= b2.right && b1.bottom <= b2.bottom && b1.left >= b2.left;\r\n};\r\n\r\nexport const isCircleInBound = (circle: Circle, rect: Rect): boolean => {\r\n  const cb = circle.getBound();\r\n  const rb = rect.getBound();\r\n  \r\n  return cb.top >= rb.top && cb.right <= rb.right && cb.bottom <= rb.bottom && cb.left >= rb.left;\r\n};\r\n\r\nexport const getTriangleArea = (pa: Point, pb: Point, pc: Point): number => {\r\n  return Math.abs((pb.x*pa.y-pa.x*pb.y)+(pc.x*pb.y-pb.x*pc.y)+(pa.x*pc.y-pc.x*pa.y)) / 2;\r\n};\r\n\r\nexport const isCircleHitRect = (circle: Circle, rect: Rect): boolean => {\r\n  // TODO need to extend the rect because circle has radius\r\n  const [p1, p2, p3, p4] = rect.getVertexes();\r\n  const cp = circle.center;\r\n  const rectArea = rect.size.w * rect.size.h;\r\n  const area = getTriangleArea(p1, p2, cp) + getTriangleArea(p2, p3, cp) + getTriangleArea(p3, p4, cp) + getTriangleArea(p4, p1, cp);\r\n  return area <= rectArea;\r\n};\r\n","import { GameConfig, TankStatus } from '../../data/Types';\r\nimport p5 from 'p5';\r\nimport Point from '../../data/Point';\r\nimport Size from '../../data/Size';\r\nimport Rect from '../../data/Rect';\r\nimport Circle from '../../data/Circle';\r\nimport Bullet from '../bullet';\r\nimport { isCircleInBound } from '../utils/collision';\r\n\r\nclass Tank {\r\n  p5: p5;\r\n  config: GameConfig;\r\n  size: Size;\r\n  halfSize: Size;\r\n  position: Point;\r\n  rotation: number;\r\n  speedMove: number;\r\n  speedRotate: number;\r\n  speedBullet: number;\r\n  body: Rect;\r\n  battleField: Rect;\r\n  id: string;\r\n  bullets: Bullet[];\r\n  allowFire = true;\r\n  debug: boolean;\r\n  isLive = true;\r\n  constructor(p5: p5, config: GameConfig, id: string, initStatus?: TankStatus) {\r\n    this.p5 = p5;\r\n    this.config = config;\r\n    this.size = {w: 48, h: 32};\r\n    this.halfSize = {w: this.size.w / 2, h: this.size.h / 2};\r\n    if (initStatus) {\r\n      this.position = initStatus.position;\r\n      this.rotation = initStatus.rotation;\r\n    } else {\r\n      this.position = new Point(50, this.config.height-80);\r\n      this.rotation = 0; //0 - 2pi deg\r\n    }\r\n    this.speedMove = 2;\r\n    this.speedRotate = p5.PI/40;\r\n    this.speedBullet = 5;\r\n    this.body = new Rect(this.position, this.rotation, this.size);\r\n    this.battleField = new Rect(new Point(config.width / 2, config.height / 2), 0, new Size(config.width, config.height));\r\n    this.id = id;\r\n    this.bullets = [];\r\n    this.debug = false;\r\n  }\r\n\r\n  draw(color: p5.Color):void {\r\n    const p5 = this.p5;\r\n    p5.stroke(color);\r\n    p5.textSize(12);\r\n\r\n    // plot tank\r\n    p5.push();\r\n    p5.fill(255, 255, 255);\r\n    p5.translate(this.position.x, this.position.y);\r\n    p5.rotate(this.rotation);\r\n    p5.rect(-this.halfSize.w, -this.halfSize.h, this.size.w, this.size.h, 5);\r\n    p5.rect(0 , -this.halfSize.h / 4, this.size.w , this.halfSize.h / 2);\r\n    p5.stroke(255, 255, 255);\r\n    p5.fill(color);\r\n    this.p5.text(this.id, -this.halfSize.w+1, 0);\r\n\r\n    // plot debug info\r\n    p5.pop();\r\n    // plot bullets\r\n    p5.fill(color);\r\n    this.drawBullets();\r\n\r\n    if (this.debug) {\r\n      p5.fill(0, 0, 255);\r\n      this.debugInfo();\r\n    }\r\n  }\r\n\r\n  debugInfo(): void {\r\n    const p5 = this.p5;\r\n    const rect = new Rect(this.position, this.rotation, this.size);\r\n    const boundingP = rect.getVertexes();\r\n    boundingP.forEach(p => {\r\n      p5.text(p.toString(1), p.x, p.y);\r\n    });\r\n  }\r\n\r\n  drawBullets(): void {\r\n    this.bullets.forEach(b => {\r\n      b.draw();\r\n    });\r\n    this.bullets = this.bullets.filter(b => {\r\n      const circle = new Circle(b.position, b.radius);\r\n      return isCircleInBound(circle, this.battleField);\r\n    });\r\n  }\r\n\r\n  nomalizePostion(p: Point): Point {\r\n    return new Point(p.x/this.config.width, p.y/this.config.height);\r\n  }\r\n\r\n  denomalizePosition(p: Point): Point {\r\n    return new Point(p.x*this.config.width, p.y*this.config.height);\r\n  }\r\n}\r\n\r\nexport default Tank;","import { GameConfig, TankStatus } from '../../data/Types';\r\nimport p5 from 'p5';\r\nimport Point from '../../data/Point';\r\nimport Rect from '../../data/Rect';\r\nimport Bullet from '../bullet';\r\nimport TankBase from './tankBase';\r\nimport Message from '../message';\r\nimport { isRectInBound } from '../utils/collision';\r\n\r\nclass TankMe extends TankBase {\r\n  message: Message;\r\n  constructor(p5: p5, config: GameConfig, id: string, message: Message, initStatus?: TankStatus) {\r\n    super(p5, config, id, initStatus);\r\n    this.message = message;\r\n  }\r\n  draw(): void {\r\n    const p5 = this.p5;\r\n    let rotation = this.rotation;\r\n    let position = new Point(this.position.x, this.position.y);\r\n    // w: 87, s: 83, a:65, d:68\r\n    if (p5.keyIsDown(65)) {\r\n      rotation -= this.speedRotate;\r\n      this.sendRotateLeft(true);\r\n    }\r\n    if (p5.keyIsDown(68)) {\r\n      rotation += this.speedRotate;\r\n      this.sendRotateRight(true);\r\n    }\r\n    rotation %= 2 * p5.PI;\r\n    let speed = 0;\r\n    if (p5.keyIsDown(87)) {\r\n      speed = this.speedMove;\r\n      this.sendMoveForward(true);\r\n    }\r\n    if (p5.keyIsDown(83)) {\r\n      speed = -this.speedMove;\r\n      this.sendMoveBackword(true);\r\n    }\r\n\r\n    const offset = new Point(speed * Math.cos(rotation), speed * Math.sin(rotation));\r\n    position = position.add(offset);\r\n\r\n    const body = new Rect(position, rotation, this.size);\r\n\r\n    // if (isRectInBound(body, this.battleField)) {\r\n    //   this.position = position;\r\n    //   this.rotation = rotation;\r\n    //   this.body = body;\r\n    // }\r\n\r\n    this.position = position;\r\n    this.rotation = rotation;\r\n    this.body = body;\r\n\r\n    if (p5.keyIsDown(32) && this.allowFire) {\r\n      // fire a bullet\r\n      this.allowFire = false;\r\n      const offset = new Point(this.size.w * Math.cos(this.rotation), this.size.w * Math.sin(this.rotation));\r\n      const bullet = new Bullet(this.p5, this.id, this.position.add(offset), this.rotation);\r\n      this.message.sendMessage(`blt,${bullet.position.x},${bullet.position.y},${bullet.rotation}`);\r\n      this.bullets.push(bullet);\r\n    }\r\n\r\n    p5.keyReleased = () => {\r\n      if (p5.keyCode == 32) {\r\n        this.allowFire = true;\r\n      }\r\n      if (p5.keyCode == 65) {\r\n        this.sendRotateLeft(false);\r\n      }\r\n      if (p5.keyCode == 68) {\r\n        this.sendRotateRight(false);\r\n      }\r\n      if (p5.keyCode == 87) {\r\n        this.sendMoveForward(false);\r\n      }\r\n      if (p5.keyCode == 83) {\r\n        this.sendMoveBackword(false);\r\n      }\r\n    };\r\n    super.draw(p5.color(255, 0, 0));\r\n  }\r\n\r\n  sendMoveForward(startFlag: boolean): void {\r\n    this.message.sendMessage(`fwd,${startFlag ? '1' : '0'}`);\r\n  }\r\n  sendMoveBackword(startFlag: boolean): void {\r\n    this.message.sendMessage(`bwd,${startFlag ? '1' : '0'}`);\r\n  }\r\n  sendRotateLeft(startFlag: boolean): void {\r\n    this.message.sendMessage(`rl,${startFlag ? '1' : '0'}`);\r\n  }\r\n  sendRotateRight(startFlag: boolean): void {\r\n    this.message.sendMessage(`rr,${startFlag ? '1' : '0'}`);\r\n  }\r\n}\r\n\r\nexport default TankMe;","import { GameConfig, TankStatus } from '../../data/Types';\r\nimport p5 from 'p5';\r\nimport Point from '../../data/Point';\r\nimport Rect from '../../data/Rect';\r\nimport { TankCommands } from '../../data/Types';\r\nimport TankBase from './tankBase';\r\nimport Bullet from '../bullet';\r\nimport { isRectInBound } from '../utils/collision';\r\n\r\nclass TankPlayer extends TankBase {\r\n  tankCommands: TankCommands\r\n  constructor(p5: p5, config: GameConfig, id: string, initStatus?: TankStatus) {\r\n    super(p5, config, id, initStatus);\r\n    this.tankCommands = {\r\n      fwd: false,\r\n      bwd: false,\r\n      rl: false,\r\n      rr: false,\r\n      blt: false\r\n    };\r\n  }\r\n  updateCommands(tankCommands: TankCommands): void {\r\n    this.tankCommands = {...this.tankCommands, ...tankCommands};\r\n  }\r\n  updateStatus(position: Point, rotation: number): void {\r\n    this.position = position;\r\n    this.rotation = rotation;\r\n    this.body = new Rect(position, rotation, this.size);\r\n  }\r\n\r\n  draw(): void {\r\n    const p5 = this.p5;\r\n    const tankCommands = this.tankCommands;\r\n    let rotation = this.rotation;\r\n    let position = new Point(this.position.x, this.position.y);\r\n    // w: 87, s: 83, a:65, d:68\r\n    if (tankCommands.rl) { \r\n      rotation -= this.speedRotate;\r\n    }\r\n    if (tankCommands.rr) {\r\n      rotation += this.speedRotate;\r\n    }\r\n    rotation %= 2 * p5.PI;\r\n    let speed = 0;\r\n    if (tankCommands.fwd) {\r\n      speed = this.speedMove;\r\n    }\r\n    if (tankCommands.bwd) {\r\n      speed = -this.speedMove;\r\n    }\r\n\r\n    const offset = new Point(speed * Math.cos(rotation), speed * Math.sin(rotation));\r\n    position = position.add(offset);\r\n\r\n    const body = new Rect(position, rotation, this.size);\r\n\r\n    // if (isRectInBound(body, this.battleField)) {\r\n    //   this.position = position;\r\n    //   this.rotation = rotation;\r\n    //   this.body = body;\r\n    // }\r\n\r\n    this.position = position;\r\n    this.rotation = rotation;\r\n    this.body = body;\r\n\r\n    super.draw(p5.color(0, 0, 255));\r\n  }\r\n\r\n  addBullet(x: number, y: number, rotation: number): void {\r\n    const bullet = new Bullet(this.p5, this.id, new Point(x, y), rotation);\r\n    this.bullets.push(bullet);\r\n  }\r\n}\r\n\r\nexport default TankPlayer;","import { GameConfig, TankStatus, Move } from '../../data/Types';\r\nimport p5 from 'p5';\r\nimport Point from '../../data/Point';\r\nimport Rect from '../../data/Rect';\r\nimport TankBase from './tankBase';\r\nimport { isRectInBound } from '../utils/collision';\r\n\r\nclass TankRobot extends TankBase {\r\n  lastMoveTime: number;\r\n  minMoveTime: number;\r\n  move: Move;\r\n  constructor(p5: p5, config: GameConfig, id: string, initStatus?: TankStatus) {\r\n    super(p5, config, id, initStatus);\r\n    this.speedMove = 1;\r\n    this.speedRotate = p5.PI/80;\r\n    this.speedBullet = 2.5;\r\n    this.lastMoveTime = Date.now();\r\n    this.minMoveTime = 3000;\r\n    this.move = {\r\n      forward: 0, \r\n      rotation: 0\r\n    };\r\n  }\r\n  draw(): void {\r\n    const p5 = this.p5;\r\n    this.randomMove();\r\n    super.draw(p5.color(0, 255, 255));\r\n  }\r\n\r\n  randomMove(): void {\r\n    const p5 = this.p5;\r\n\r\n    const curTime = Date.now();\r\n\r\n    if (curTime < this.lastMoveTime + this.minMoveTime) {\r\n      // still less that last move, do nothing\r\n    } else {\r\n      this.lastMoveTime = curTime;\r\n      // get move status\r\n      this.move.forward = Math.floor(Math.random()*10); // 0-9\r\n      this.move.rotation = Math.floor(Math.random()*10);\r\n    }\r\n\r\n    let speed = 0;\r\n    if (this.move.forward <= 1) {\r\n      // don't move\r\n      speed = 0;\r\n    } else if (this.move.forward <= 3){\r\n      // move backword\r\n      speed = -this.speedMove;\r\n    } else {\r\n      // move forward\r\n      speed = this.speedMove;\r\n    }\r\n\r\n    let rotation = this.rotation;\r\n    if (this.move.rotation <= 1) {\r\n      // rotate left\r\n      rotation -= this.speedRotate;\r\n    } else if (this.move.rotation <= 3) {\r\n      rotation += this.speedRotate;\r\n    }\r\n\r\n    rotation %= 2 * p5.PI;\r\n\r\n    const offset = new Point(speed * Math.cos(rotation), speed * Math.sin(rotation));\r\n    let position = new Point(this.position.x, this.position.y);\r\n    position = position.add(offset);\r\n\r\n    const body = new Rect(position, rotation, this.size);\r\n\r\n    if (isRectInBound(body, this.battleField)) {\r\n      this.position = position;\r\n      this.rotation = rotation;\r\n      this.body = body;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TankRobot;","export const getWebSockedDomain = (): string => {\r\n  const loc = window.location;\r\n  let wsUri = 'wss:';\r\n  if (loc.protocol === 'http:') {\r\n    wsUri = 'ws:';\r\n  }\r\n  wsUri += '//' + loc.host;\r\n  return wsUri;\r\n};\r\n\r\nexport const getRandomNumber = (): string => {\r\n  const randomId = Math.random()*10000;\r\n  return randomId.toFixed(0);\r\n};","import { MessageListener } from '../data/Types';\r\nimport { getWebSockedDomain } from './utils/urls';\r\n\r\nclass Message {\r\n  ws: WebSocket;\r\n  id: string;\r\n  constructor(id: string) {\r\n    this.id = id;\r\n  }\r\n\r\n  async getConnection(): Promise<boolean> {\r\n    const wsUri = getWebSockedDomain();\r\n    this.ws = new WebSocket(`${wsUri}/websockets?id=${encodeURIComponent(this.id)}`);\r\n\r\n    return new Promise((resolve) => {\r\n      // Connection opened\r\n      this.ws.addEventListener('open', () => {\r\n        resolve(true);\r\n      });\r\n      this.ws.addEventListener('error', () => {\r\n        resolve(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  listenOnMessage(callback: MessageListener): void {\r\n    this.ws.addEventListener('message', evt => {\r\n      callback(evt.data);\r\n    });\r\n  }\r\n\r\n  sendMessage(msg: string): void {\r\n    this.ws.send(msg);\r\n  }\r\n}\r\n\r\nexport default Message;","import { GameConfig } from '../../data/Types';\r\nimport TankMe from '../tank/tankMe';\r\nimport TankPlayer from '../tank/tankPlayer';\r\nimport TankRobot from '../tank/tankRobot';\r\nimport p5 from 'p5';\r\nimport Point from '../../data/Point';\r\nimport { TankStatus } from '../../data/Types';\r\nimport { isCircleHitRect } from '../utils/collision';\r\nimport Circle from '../../data/Circle';\r\nimport Messge from '../message';\r\nimport Message from '../message';\r\n\r\nclass Game {\r\n  config: GameConfig;\r\n  p5: p5;\r\n  sketch: p5;\r\n  me: TankMe;\r\n  robots: TankRobot[];\r\n  players: {[key: string]: TankPlayer};\r\n  canvas: p5.Renderer;\r\n  score: {[key: string]: number};\r\n  message: Message;\r\n  id: string;\r\n  constructor(config: GameConfig) {\r\n    this.config = config;\r\n    this.robots = [];\r\n    this.players = {};\r\n    this.id = config.id;\r\n    this.score = {};\r\n    this.message = new Messge(this.id);\r\n    this.p5 = new p5((sketch) => {\r\n      sketch.setup = () => {\r\n        this.setupGame(sketch);\r\n      };\r\n      sketch.draw = () => {\r\n        this.runGame();\r\n      };\r\n    });\r\n  }\r\n\r\n  async setupGame(sketch: p5) {\r\n    this.sketch = sketch;\r\n    // remove the previous canvas\r\n    const curCanvas = document.querySelector(`#${this.config.canvasParentId} canvas`);\r\n    if(curCanvas) {\r\n      curCanvas.remove();\r\n    }\r\n    this.canvas = sketch.createCanvas(this.config.width, this.config.height);\r\n    this.canvas.parent(this.config.canvasParentId);\r\n\r\n    const isConnected = await this.message.getConnection();\r\n    if (isConnected) {\r\n      const tankStatus = this.getRandTankStatus();\r\n      this.me = new TankMe(this.p5, this.config, this.id, this.message, tankStatus);\r\n      this.message.listenOnMessage(this.handleMessages.bind(this));\r\n      setInterval(() => {\r\n        this.message.sendMessage(`pos,${this.me.position.x},${this.me.position.y},${this.me.rotation}`);\r\n      }, this.config.syncRate);\r\n    }\r\n  }\r\n\r\n  runGame(): void {\r\n    //clear all canvas\r\n    this.sketch.background('#F3F3F3');\r\n    this.drawScore();\r\n\r\n    if (this.me) {\r\n      this.me.draw();\r\n    }\r\n\r\n    for(const playerId in this.players) {\r\n      const p = this.players[playerId];\r\n      p.draw();\r\n    }\r\n    \r\n    this.checkIfHit();\r\n  }\r\n\r\n  drawScore(): void {\r\n    const p5 = this.p5;\r\n    p5.fill(0, 0, 255);\r\n    p5.stroke(0, 0, 255);\r\n    p5.textSize(32);\r\n    Object.keys(this.score).forEach((tankId, idx) => {\r\n      p5.text(`${tankId}: ${this.score[tankId]}`, 20, 40 + 32 * idx);\r\n    });\r\n  }\r\n\r\n  handleMessages(data: string): void {\r\n    const typeIdx = data.indexOf(',');\r\n    const messageType = data.substring(0, typeIdx);\r\n    const messageData = data.substring(typeIdx + 1);\r\n    switch (messageType) {\r\n      case 'pos':\r\n        this.updatePlayersPostion(messageData);\r\n        break;\r\n      case 'fwd':\r\n      case 'bwd':\r\n      case 'rl':\r\n      case 'rr':\r\n        this.updatePlayer(messageType, messageData);\r\n        break;\r\n      case 'blt':\r\n        this.updateBullets(messageData);\r\n        break;\r\n      case 'hit':\r\n        this.updateScore(messageData);\r\n        break;\r\n      case 'ext':\r\n        this.updateExit(messageData);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  updatePlayersPostion(commandData: string): void {\r\n    const tanksData = JSON.parse(commandData);\r\n    for (const tankId in tanksData) {\r\n      const data = tanksData[tankId].split(',');\r\n      if (tankId === this.id) {\r\n        // no need to create myself\r\n        continue;\r\n      }\r\n      const playerStatus: TankStatus = {\r\n        position: new Point(+data[0], +data[1]),\r\n        rotation: +data[2]\r\n      };\r\n      const player = this.players[tankId];\r\n      if (player) {\r\n        player.updateStatus(playerStatus.position, playerStatus.rotation);\r\n      } else {\r\n        this.players[tankId] = new TankPlayer(this.p5, this.config, tankId, playerStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  updatePlayer(commandType: string, commandData: string): void {\r\n    const data = commandData.split(',');\r\n    const id = data[0];\r\n    const commandValue = +data[1];\r\n    if (id === this.id || !this.players[id]) {\r\n      // no need to update myself or invald player\r\n      return;\r\n    }\r\n    const player = this.players[id];\r\n    const playerCommandUpdate = {[commandType]: !!commandValue};\r\n    player.tankCommands = {...player.tankCommands, ...playerCommandUpdate};\r\n  }\r\n\r\n  updateScore(scoreData: string): void {\r\n    this.score = JSON.parse(scoreData);\r\n  }\r\n\r\n  updateBullets(data: string): void {\r\n    const [id, x, y, r] = data.split(',');\r\n    // skip my own bullet\r\n    if (id === this.id) {\r\n      return;\r\n    }\r\n    // add the bullet to the player\r\n    const player = this.players[id];\r\n    if (player) {\r\n      player.addBullet(+x, +y, +r);\r\n    }\r\n  }\r\n\r\n  updateExit(id: string): void {\r\n    delete this.players[id];\r\n    delete this.score[id];\r\n  }\r\n\r\n  addRobots(): void {\r\n    const enemyCount = this.robots.length;\r\n    this.robots.push(new TankRobot(this.p5, this.config, `robot${enemyCount}`, this.getRandTankStatus()));\r\n  }\r\n\r\n  getRandTankStatus(): TankStatus {\r\n    const randPoint = new Point(Math.random()*this.config.width, Math.random()*this.config.height);\r\n    const randStatus = {\r\n      position: randPoint,\r\n      rotation: Math.random()* 2 * this.p5.PI\r\n    };\r\n    return randStatus;\r\n  }\r\n\r\n  checkIfHit(): void {\r\n    const allTanks = {...this.players, [this.id]: this.me};\r\n\r\n    for (const tankId in allTanks) {\r\n      const tank = allTanks[tankId];\r\n      if (!tank) {\r\n        continue;\r\n      }\r\n      for (const tb of tank.bullets) {\r\n        if (tb.isHit) {\r\n          continue;\r\n        }\r\n        const tbCircle = new Circle(tb.position, tb.radius);\r\n        for (const playerId in allTanks) {\r\n          if (playerId != tankId){\r\n            // never check if hit self\r\n            const enemy = allTanks[playerId];\r\n            if (isCircleHitRect(tbCircle, enemy.body)) {\r\n              console.log(`tank ${tankId} bullet hits tank ${playerId}`);\r\n              if (tankId == this.id) {\r\n                this.message.sendMessage(`hit,${this.id}`);\r\n              }\r\n              tb.isHit = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      tank.bullets = tank.bullets.filter(tb => !tb.isHit);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Game;","import React, {useEffect, useRef} from 'react';\r\nimport { useGameData } from '../../context/context';\r\nimport Game from './game';\r\nimport './game-container.scss';\r\n\r\nconst GameContainer = (): JSX.Element => {\r\n  const container = useRef<HTMLDivElement>(null);\r\n  const { gameData } = useGameData();\r\n  useEffect(() => {\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    const current = container.current;\r\n    if (current) {\r\n      current.style.width = `${width}px`;\r\n      current.style.height = `${height}px`;\r\n    }\r\n    new Game({\r\n      width,\r\n      height,\r\n      canvasParentId: 'game-container',\r\n      syncRate: 100,\r\n      id: gameData.id\r\n    });\r\n  }, []);\r\n  return <div id='game-container' ref={container}></div>;\r\n};\r\n\r\nexport default GameContainer;","import { GameConfig, TankStatus, TankTransformStatus } from '../../data/Types';\r\nimport * as THREE from 'three';\r\nimport p5 from 'p5';\r\nimport Point from '../../data/Point';\r\nimport Rect from '../../data/Rect';\r\nimport Bullet from '../bullet';\r\nimport TankBase3 from './tankBase3';\r\nimport Message from '../message';\r\nimport { isRectInBound } from '../utils/collision';\r\nimport { Clock, Scene, Vector3 } from 'three';\r\n\r\nclass TankMe3 extends TankBase3 {\r\n\r\n  message: Message;\r\n  transformStatus: TankTransformStatus;\r\n  headDirection: Vector3;\r\n  constructor(scene: Scene, config: GameConfig, message: Message, clock: Clock, initStatus?: TankStatus) {\r\n    super(scene, config, clock, initStatus);\r\n    this.message = message;\r\n    this.transformStatus = {direction: 0, rotation: 0};\r\n    this.speedMove = 80;\r\n    this.speedRotate = 1;\r\n    this.speedBullet = 500;\r\n    this.bullets = [];\r\n    this.debug = false;\r\n    this.headDirection = new Vector3(1, 0, 0);\r\n  }\r\n\r\n  sendMoveForward(startFlag: boolean): void {\r\n    this.message.sendMessage(`fwd,${startFlag ? '1' : '0'}`);\r\n  }\r\n  sendMoveBackword(startFlag: boolean): void {\r\n    this.message.sendMessage(`bwd,${startFlag ? '1' : '0'}`);\r\n  }\r\n  sendRotateLeft(startFlag: boolean): void {\r\n    this.message.sendMessage(`rl,${startFlag ? '1' : '0'}`);\r\n  }\r\n  sendRotateRight(startFlag: boolean): void {\r\n    this.message.sendMessage(`rr,${startFlag ? '1' : '0'}`);\r\n  }\r\n\r\n  moveForward() {\r\n    this.transformStatus.direction = 1;\r\n  }\r\n\r\n  isMovingForward() {\r\n    return this.transformStatus.direction === 1;\r\n  }\r\n\r\n  moveBackward() {\r\n    this.transformStatus.direction = -1;\r\n  }\r\n\r\n  isMovingBackward() {\r\n    return this.transformStatus.direction === -1;\r\n  }\r\n\r\n  stopMoving() {\r\n    this.transformStatus.direction = 0;\r\n  }\r\n\r\n  isMovingStop() {\r\n    return this.transformStatus.direction === 0;\r\n  }\r\n\r\n  rotateRight() {\r\n    this.transformStatus.rotation = -1;\r\n  }\r\n\r\n  isRotatingRight() {\r\n    return this.transformStatus.rotation === -1;\r\n  }\r\n\r\n  rotateLeft() {\r\n    this.transformStatus.rotation = 1;\r\n  }\r\n\r\n  isRotatingLeft() {\r\n    return this.transformStatus.rotation === 1;\r\n  }\r\n\r\n  stopRotating() {\r\n    this.transformStatus.rotation = 0;\r\n  }\r\n\r\n  isRotatingStop() {\r\n    return this.transformStatus.rotation === 0;\r\n  }\r\n\r\n  update() {\r\n    const deltaTime = this.clock.getDelta();\r\n    const rotationDelta = this.transformStatus.rotation * this.speedRotate * deltaTime;\r\n    this.body.rotateZ(rotationDelta);\r\n    const speed = this.transformStatus.direction * this.speedMove * deltaTime;\r\n    const axis = new THREE.Vector3(1, 0, 0);\r\n    this.body.translateOnAxis(axis, speed);\r\n  }\r\n\r\n}\r\n\r\nexport default TankMe3;","import * as THREE from 'three';\r\nimport { GameConfig, TankStatus } from '../../data/Types';\r\nimport p5 from 'p5';\r\nimport Point from '../../data/Point';\r\nimport Size from '../../data/Size';\r\nimport Rect from '../../data/Rect';\r\nimport Circle from '../../data/Circle';\r\nimport Bullet from '../bullet';\r\nimport { isCircleInBound } from '../utils/collision';\r\nimport { BoxGeometry, Clock, Mesh, MeshBasicMaterial, Scene } from 'three';\r\n\r\nclass Tank {\r\n  p5: p5;\r\n  config: GameConfig;\r\n  size: Size;\r\n  halfSize: Size;\r\n  position: Point;\r\n  rotation: number;\r\n  speedMove: number;\r\n  speedRotate: number;\r\n  speedBullet: number;\r\n  battleField: Rect;\r\n  id: string;\r\n  bullets: Bullet[];\r\n  allowFire = true;\r\n  debug: boolean;\r\n  isLive = true;\r\n  bodyGeometry: BoxGeometry;\r\n  bodyMaterial: MeshBasicMaterial;\r\n  body: Mesh;\r\n  clock: Clock;\r\n  constructor(scene: Scene, config: GameConfig, clock: Clock, initStatus?: TankStatus) {\r\n    this.clock = clock;\r\n    this.bodyGeometry = new THREE.BoxGeometry(24, 15, 0);\r\n    this.bodyMaterial = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\r\n    this.body = new THREE.Mesh(this.bodyGeometry, this.bodyMaterial);\r\n\r\n    scene.add(this.body);\r\n  }\r\n\r\n  debugInfo(): void {\r\n    const p5 = this.p5;\r\n    const rect = new Rect(this.position, this.rotation, this.size);\r\n    const boundingP = rect.getVertexes();\r\n    boundingP.forEach(p => {\r\n      p5.text(p.toString(1), p.x, p.y);\r\n    });\r\n  }\r\n\r\n  drawBullets(): void {\r\n    this.bullets.forEach(b => {\r\n      b.draw();\r\n    });\r\n    this.bullets = this.bullets.filter(b => {\r\n      const circle = new Circle(b.position, b.radius);\r\n      return isCircleInBound(circle, this.battleField);\r\n    });\r\n  }\r\n\r\n  nomalizePostion(p: Point): Point {\r\n    return new Point(p.x/this.config.width, p.y/this.config.height);\r\n  }\r\n\r\n  denomalizePosition(p: Point): Point {\r\n    return new Point(p.x*this.config.width, p.y*this.config.height);\r\n  }\r\n}\r\n\r\nexport default Tank;","import * as THREE from 'three';\r\nimport { Mesh, PerspectiveCamera, Scene, WebGLRenderer, OrthographicCamera, Clock } from 'three';\r\nimport { GameConfig } from '../../data/Types';\r\nimport TankMe3 from '../tank/tankMe3';\r\nimport Message from '../message';\r\n\r\nclass Game {\r\n  config: GameConfig;\r\n  score: {[key: string]: number};\r\n  message: Message;\r\n  id: string;\r\n  scene: Scene;\r\n  camera: PerspectiveCamera;\r\n  renderer: WebGLRenderer;\r\n  player: TankMe3;\r\n  clock: Clock;\r\n  constructor(config: GameConfig) {\r\n    this.config = config;\r\n    this.id = config.id;\r\n    this.score = {};\r\n    this.message = new Message(this.id);\r\n    this.scene = new THREE.Scene();\r\n    this.scene.background = new THREE.Color(0xACDF87);\r\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\r\n    //this.camera = new THREE.OrthographicCamera( -window.innerWidth / 2, window.innerWidth / 2, window.innerHeight / 2, -window.innerHeight / 2, 1, 1000 );\r\n    this.camera.position.z = 800;\r\n    this.renderer = new THREE.WebGLRenderer({antialias: true});\r\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\r\n    document.getElementById(config.canvasParentId)!.appendChild(this.renderer.domElement);\r\n    this.registerEvents();\r\n    this.clock = new THREE.Clock();\r\n    // add a tank\r\n    this.player = new TankMe3(this.scene, config, this.message, this.clock);\r\n    this.animate();\r\n  }\r\n\r\n  animate() {\r\n    requestAnimationFrame(this.animate.bind(this));\r\n    this.renderer.render(this.scene, this.camera);\r\n    this.player.update();\r\n  }\r\n\r\n  registerEvents() {\r\n    window.addEventListener('resize', () => {\r\n      this.camera.aspect = window.innerWidth / window.innerHeight;\r\n      this.camera.updateProjectionMatrix();\r\n      this.renderer.setSize( window.innerWidth, window.innerHeight );\r\n    });\r\n    window.addEventListener('keydown', this.keydownListener.bind(this));\r\n    window.addEventListener('keyup', this.keyupListener.bind(this));\r\n  }\r\n\r\n  keydownListener(evt: KeyboardEvent) {\r\n    if (evt.key === 'w') {\r\n      this.player.moveForward();\r\n    }\r\n    if (evt.key === 's') {\r\n      this.player.moveBackward();\r\n    }\r\n    if (evt.key === 'a') {\r\n      this.player.rotateLeft();\r\n    }\r\n    if (evt.key === 'd') {\r\n      this.player.rotateRight();\r\n    }\r\n  }\r\n\r\n  keyupListener(evt: KeyboardEvent) {\r\n    if (evt.key === 'w' && this.player.isMovingForward()) {\r\n      this.player.stopMoving();\r\n    }\r\n    if (evt.key === 's' && this.player.isMovingBackward()) {\r\n      this.player.stopMoving();\r\n    }\r\n    if (evt.key === 'a' && this.player.isRotatingLeft()) {\r\n      this.player.stopRotating();\r\n    }\r\n    if (evt.key === 'd' && this.player.isRotatingRight()) {\r\n      this.player.stopRotating();\r\n    }\r\n  }\r\n\r\n  handleMessages(data: string): void {\r\n    const typeIdx = data.indexOf(',');\r\n    const messageType = data.substring(0, typeIdx);\r\n    const messageData = data.substring(typeIdx + 1);\r\n    switch (messageType) {\r\n      case 'pos':\r\n        this.updatePlayersPostion(messageData);\r\n        break;\r\n      case 'fwd':\r\n      case 'bwd':\r\n      case 'rl':\r\n      case 'rr':\r\n        this.updatePlayer(messageType, messageData);\r\n        break;\r\n      case 'blt':\r\n        this.updateBullets(messageData);\r\n        break;\r\n      case 'hit':\r\n        this.updateScore(messageData);\r\n        break;\r\n      case 'ext':\r\n        this.updateExit(messageData);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  updatePlayersPostion(commandData: string): void {\r\n    const tanksData = JSON.parse(commandData);\r\n    for (const tankId in tanksData) {\r\n      const data = tanksData[tankId].split(',');\r\n      if (tankId === this.id) {\r\n        // no need to create myself\r\n        continue;\r\n      }\r\n    }\r\n  }\r\n\r\n  updatePlayer(commandType: string, commandData: string): void {\r\n    const data = commandData.split(',');\r\n    const id = data[0];\r\n    const commandValue = +data[1];\r\n  }\r\n\r\n  updateScore(scoreData: string): void {\r\n    this.score = JSON.parse(scoreData);\r\n  }\r\n\r\n  updateBullets(data: string): void {\r\n    const [id, x, y, r] = data.split(',');\r\n    // skip my own bullet\r\n    if (id === this.id) {\r\n      return;\r\n    }\r\n    // add the bullet to the player\r\n  }\r\n\r\n  updateExit(id: string): void {\r\n    delete this.score[id];\r\n  }\r\n\r\n  addRobots(): void {\r\n    console.log(1);\r\n  }\r\n\r\n  checkIfHit(): void {\r\n    console.log(1);\r\n  }\r\n}\r\n\r\nexport default Game;","import React, {useEffect} from 'react';\r\nimport { useGameData } from '../../context/context';\r\nimport './game-container.scss';\r\nimport Game3 from './game3';\r\n\r\nconst GameContainer3 = (): JSX.Element => {\r\n  const { gameData } = useGameData();\r\n  let game3: Game3 | undefined;\r\n  useEffect(() => {\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    if (!game3) {\r\n      game3 = new Game3({\r\n        width,\r\n        height,\r\n        canvasParentId: 'game-container',\r\n        syncRate: 100,\r\n        id: gameData.id\r\n      });\r\n    }\r\n  }, []);\r\n  return <div id='game-container'></div>;\r\n};\r\n\r\nexport default GameContainer3;","import React, { FormEvent, useRef, useEffect } from 'react';\r\nimport { useGameData } from '../context/context';\r\n\r\nimport './welcome.scss';\r\n\r\nconst Welcome = (): JSX.Element => {\r\n  const inputTankNameE = useRef<HTMLInputElement>(null);\r\n  const inputEngineE = useRef<HTMLInputElement>(null);\r\n  const { setGameData, gameData } = useGameData();\r\n  useEffect(() => {\r\n    if (inputEngineE.current) {\r\n      inputEngineE.current.checked = gameData.engine;\r\n    }\r\n  }, []);\r\n  const formPreventDefault = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    let name = '', engine = true;\r\n    if (inputTankNameE.current && inputTankNameE.current.value) {\r\n      name = inputTankNameE.current.value;\r\n    }\r\n    if (inputEngineE.current) {\r\n      engine = inputEngineE.current.checked;\r\n    }\r\n    setGameData({\r\n      id: name,\r\n      engine\r\n    });\r\n  };\r\n  return <div id='tank-name-form'>\r\n    <form onSubmit={formPreventDefault}>\r\n      <div className='form-div'>\r\n        <input id='tank-name' size={50} placeholder='please name your tank' ref={inputTankNameE}></input>\r\n      </div>\r\n      <div className='form-div'>\r\n        <input id='threejs-engine' type='checkbox' ref={inputEngineE}></input><label htmlFor='threejs-engine'>Engine Mode</label>\r\n      </div>\r\n      <button>Start</button>\r\n    </form>\r\n  </div>;\r\n};\r\n\r\nexport default Welcome;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { useGameData, GameDataContext } from './context/context';\r\nimport GameContainer from './components/game/game-container';\r\nimport GameContainer3 from './components/game/game-container3';\r\nimport Welcome from './components/welcome';\r\n\r\nfunction App():JSX.Element {\r\n  const [gameData, setGameData] = useState({id: '', engine: true});\r\n  console.log(gameData);\r\n  const getView = () => {\r\n    if (!gameData.id) {\r\n      return <Welcome />;\r\n    } else if (gameData.engine) {\r\n      return <GameContainer3 />;\r\n    } else {\r\n      return <GameContainer />;\r\n    }\r\n  };\r\n  return <GameDataContext.Provider value={{ gameData, setGameData }}>\r\n    <div className=\"App\">\r\n      {getView()}\r\n    </div>\r\n  </GameDataContext.Provider>;\r\n}\r\n\r\nexport default App;\r\n","/* eslint-disable @typescript-eslint/no-explicit-any*/\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport const register = (config: any): void => {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n  // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nfunction registerValidSW(swUrl: string, config: any) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config: any) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n    (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport const unregister = (): void => {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}